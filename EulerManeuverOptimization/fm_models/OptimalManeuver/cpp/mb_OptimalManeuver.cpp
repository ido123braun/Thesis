//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// mb_OptimalManeuver.cpp
//
// Code generation for function 'mb_OptimalManeuver'
//

// Include files
#include "mb_OptimalManeuver.h"
#include <cmath>
#include <cstring>

// Function Declarations
static void sys_3f22f56eae30e66f37b93157a10b4364_jac(
    double in1val1, double in2val1, double in3val1, double in4val1,
    double in5val1, double in7val1, double in8val1, double in9val1,
    double in10val1, double in11val1, double in12val1, double out1[3],
    double *out2, double *out3, double *out4, double j_out1[36],
    double j_out2[12], double j_out3[12], double j_out4[12]);

// Function Definitions
static void sys_3f22f56eae30e66f37b93157a10b4364_jac(
    double in1val1, double in2val1, double in3val1, double in4val1,
    double in5val1, double in7val1, double in8val1, double in9val1,
    double in10val1, double in11val1, double in12val1, double out1[3],
    double *out2, double *out3, double *out4, double j_out1[36],
    double j_out2[12], double j_out3[12], double j_out4[12])
{
  double b_t249_tmp;
  double b_t250_tmp;
  double c_t250_tmp;
  double t10;
  double t11;
  double t12;
  double t139;
  double t14;
  double t144;
  double t145;
  double t148;
  double t149;
  double t16;
  double t166;
  double t166_tmp;
  double t167;
  double t167_tmp;
  double t168;
  double t169;
  double t17;
  double t181;
  double t181_tmp;
  double t182;
  double t183;
  double t183_tmp;
  double t184;
  double t192;
  double t192_tmp;
  double t193;
  double t194;
  double t195;
  double t2;
  double t204;
  double t207;
  double t21;
  double t219;
  double t22;
  double t228;
  double t23;
  double t24;
  double t244;
  double t246_tmp;
  double t249_tmp;
  double t25;
  double t250;
  double t250_tmp;
  double t256;
  double t26;
  double t27;
  double t28;
  double t29;
  double t3;
  double t30;
  double t33;
  double t34;
  double t35;
  double t36;
  double t37;
  double t38;
  double t39;
  double t4;
  double t40;
  double t41;
  double t41_tmp;
  double t42;
  double t45;
  double t46;
  double t48;
  double t49;
  double t5;
  double t54;
  double t57;
  double t6;
  double t69;
  double t7;
  double t70;
  double t78;
  double t79;
  double t8;
  double t80;
  double t81;
  double t88;
  double t89;
  double t9;
  double t91;
  double t92;
  // SYS_3F22F56EAE30E66F37B93157A10B4364_JAC
  //     [OUT1,OUT2,OUT3,OUT4,J_OUT1,J_OUT2,J_OUT3,J_OUT4,H_OUT1,H_OUT2,H_OUT3,H_OUT4]
  //     =
  //     SYS_3F22F56EAE30E66F37B93157A10B4364_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1,IN7VAL1,IN8VAL1,IN9VAL1,IN10VAL1,IN11VAL1,IN12VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:30:45
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1],
  // [1 1], [1 1], [1 1], [1 1]} Derivative inputs: [true true true true true
  // true true true true true true true] DerivativeOrder  : 1 Output dimensions:
  // {[3 1], [1 1], [1 1], [1 1]} Constant outputs : [false false false false]
  t2 = std::abs(in2val1);
  t3 = std::abs(in3val1);
  t4 = std::abs(in4val1);
  t5 = std::cos(in5val1);
  t6 = std::cos(in11val1);
  t7 = in2val1;
  if (in2val1 < 0.0) {
    t7 = -1.0;
  } else if (in2val1 > 0.0) {
    t7 = 1.0;
  }
  t8 = in3val1;
  if (in3val1 < 0.0) {
    t8 = -1.0;
  } else if (in3val1 > 0.0) {
    t8 = 1.0;
  }
  t9 = in4val1;
  if (in4val1 < 0.0) {
    t9 = -1.0;
  } else if (in4val1 > 0.0) {
    t9 = 1.0;
  }
  t10 = std::sin(in5val1);
  t11 = std::sin(in11val1);
  t12 = in2val1 * in2val1;
  t14 = in3val1 * in3val1;
  t16 = in4val1 * in4val1;
  t17 = std::pow(in4val1, 3.0);
  t24 = 1.0 / in10val1;
  t30 = in1val1 * 2.2557695644629531E-5;
  t21 = t10 * t10;
  t22 = in7val1 * t6;
  t23 = in7val1 * t11;
  t25 = t24 * t24;
  t26 = t12 + t14;
  t27 = 1.0 / t26;
  t28 = 1.0 / std::sqrt(t26);
  t26 = (t2 * t2 + t3 * t3) + t4 * t4;
  t69 = std::pow(t30 + 1.0, 3.2586437952291609);
  t70 = std::pow(t30 + 1.0, 4.2586437952291609);
  t29 = std::pow(t28, 3.0);
  t33 = t5 * t28;
  t34 = t10 * t28;
  t35 = 1.0 / t26;
  t45 = 1.0 / std::sqrt(t26);
  t36 = t35 * t35;
  t37 = in2val1 * t33;
  t38 = in3val1 * t33;
  t39 = in2val1 * t34;
  t40 = in3val1 * t34;
  t41_tmp = in2val1 * in3val1;
  t41 = t41_tmp * t5 * t29;
  t42 = t41_tmp * t10 * t29;
  t46 = std::pow(t45, 3.0);
  t48 = t5 * t14 * t29;
  t49 = t10 * t12 * t29;
  t54 = in10val1 * t45;
  t57 = t16 * t35;
  t88 = t37 * t45;
  t89 = t38 * t45;
  t91 = t39 * t45;
  t92 = t40 * t45;
  t30 = in4val1 * t42 * t45;
  t26 = in4val1 * t41 * t45;
  t181_tmp = in4val1 * t2 * t7;
  t204 = -(t5 * t12 * t29);
  t181 = ((t33 + t204) + t30) + t181_tmp * t40 * t46;
  t182 = ((-t34 + t49) + t26) + t181_tmp * t38 * t46;
  t183_tmp = in4val1 * t3 * t8;
  t207 = -(t10 * t14 * t29);
  t183 = ((t34 + t207) + t26) + t183_tmp * t37 * t46;
  t184 = ((-t33 + t48) + t30) + t183_tmp * t39 * t46;
  t192_tmp = in4val1 * t45;
  t192 = ((t42 + in4val1 * -t33 * t45) + t192_tmp * t48) + t183_tmp * t38 * t46;
  t193 = ((t41 + in4val1 * -t34 * t45) + t192_tmp * t49) + t181_tmp * t39 * t46;
  t78 = std::sqrt(-t57 + 1.0);
  t256 = t4 * t9 * t16;
  t139 = in4val1 * t35 * 2.0 + -(t256 * t36 * 2.0);
  t144 = t38 + in4val1 * t91;
  t145 = t39 + in4val1 * t89;
  t166_tmp = in4val1 * t4 * t9;
  t166 = t88 + -(t166_tmp * t37 * t46);
  t167_tmp = t166_tmp * t46;
  t167 = t89 + t167_tmp * -t38;
  t168 = t91 + t167_tmp * -t39;
  t169 = t92 + -(t166_tmp * t40 * t46);
  t194 =
      ((t42 + in4val1 * t33 * t45) + t192_tmp * t204) + -(t181_tmp * t37 * t46);
  t195 =
      ((t41 + in4val1 * t34 * t45) + t192_tmp * t207) + -(t183_tmp * t40 * t46);
  t79 = 1.0 / t78;
  t80 = t5 * t78;
  t81 = t10 * t78;
  t148 = t37 + -(in4val1 * t92);
  t149 = t40 + -(in4val1 * t88);
  t48 = t12 * t28;
  t49 = t14 * t28;
  t26 = (t16 * t45 + t48 * t78) + t49 * t78;
  t30 = std::abs(t26);
  if (t26 < 0.0) {
    t26 = -1.0;
  } else if (t26 > 0.0) {
    t26 = 1.0;
  }
  t91 = (in4val1 * t80 + in2val1 * t149) + -(in3val1 * t145);
  t42 = (in4val1 * t81 + -(in2val1 * t144)) + in3val1 * t148;
  t204 = std::abs(t91);
  t33 = std::abs(t42);
  t41 = t91;
  if (t91 < 0.0) {
    t41 = -1.0;
  } else if (t91 > 0.0) {
    t41 = 1.0;
  }
  t207 = t42;
  if (t42 < 0.0) {
    t207 = -1.0;
  } else if (t42 > 0.0) {
    t207 = 1.0;
  }
  t219 = (t30 * t30 + t204 * t204) + t33 * t33;
  t30 *= t26;
  t35 = t33 * t207;
  t89 = t204 * t41;
  t244 = (t30 *
              (((-(t192_tmp * 2.0) + t256 * t46) + t48 * t79 * t139 / 2.0) +
               t49 * t79 * t139 / 2.0) *
              2.0 +
          t35 *
              (((-t81 + in2val1 * t168) + in3val1 * t169) +
               in4val1 * t10 * t79 * t139 / 2.0) *
              2.0) +
         t89 *
             (((-t80 + in2val1 * t166) + in3val1 * t167) +
              in4val1 * t5 * t79 * t139 / 2.0) *
             2.0;
  t26 = t2 * t7;
  t49 = t26 * t10;
  t249_tmp = t26 * t16;
  b_t249_tmp = t2 * t5 * t7;
  t48 = (t30 *
             (((((t249_tmp * t46 - in2val1 * t28 * t78 * 2.0) +
                 std::pow(in2val1, 3.0) * t29 * t78) +
                in2val1 * t14 * t29 * t78) -
               t26 * t12 * t16 * t28 * t36 * t79) -
              t26 * t14 * t16 * t28 * t36 * t79) *
             -2.0 +
         t35 *
             ((((-t38 + t192_tmp * -t39) + t49 * t17 * t36 * t79) +
               in3val1 * t181) +
              in2val1 * t193) *
             2.0) +
        t89 *
            (((t149 + b_t249_tmp * t17 * t36 * t79) + in3val1 * t182) +
             -(in2val1 * t194)) *
            2.0;
  t26 = t3 * t8;
  t250_tmp = t26 * t10;
  b_t250_tmp = t26 * t16;
  c_t250_tmp = t3 * t5 * t8;
  t250 = (t30 *
              (((((b_t250_tmp * t46 - in3val1 * t28 * t78 * 2.0) +
                  std::pow(in3val1, 3.0) * t29 * t78) +
                 in3val1 * t12 * t29 * t78) -
                t26 * t12 * t16 * t28 * t36 * t79) -
               t26 * t14 * t16 * t28 * t36 * t79) *
              -2.0 +
          t89 *
              ((((-t39 + t192_tmp * -t38) + c_t250_tmp * t17 * t36 * t79) +
                in2val1 * t183) +
               in3val1 * t192) *
              2.0) +
         t35 *
             (((t148 + t250_tmp * t17 * t36 * t79) + in2val1 * t184) +
              -(in3val1 * t195)) *
             2.0;
  t17 = t42 * t204 * t41 * 2.0 + -(t91 * t33 * t207 * 2.0);
  t246_tmp = in9val1 * t70;
  t228 = (t23 + -(in10val1 * t80)) + t246_tmp * t219 * 17.074078592196649;
  t26 = in4val1 * in10val1;
  t30 = in8val1 * t70;
  t38 = (t54 + -(t26 * t4 * t9 * t46)) + t30 * t244 * 17.074078592196649;
  t39 = t26 * t2 * t7 * t46 + t30 * t48 * 17.074078592196649;
  t256 = t26 * t3 * t8 * t46 + t30 * t250 * 17.074078592196649;
  t37 = (t22 + in4val1 * t54) + -(t30 * t219 * 17.074078592196649);
  t92 = t24 * t28 * t78 * t37 * 9.81;
  t40 = t24 * t149;
  out1[0] = (in2val1 * t92 - t81 * t144 * 9.81) - t40 * t228 * 9.81;
  t88 = t24 * t145;
  out1[1] = (in3val1 * t92 + t81 * t148 * 9.81) + t88 * t228 * 9.81;
  t204 = t24 * t80;
  t207 = in4val1 * t24 * t45;
  out1[2] =
      (t21 * (t57 - 1.0) * -9.81 - t204 * t228 * 9.81) + t207 * t37 * 9.81;
  *out2 = -in7val1 * in12val1;
  *out3 = -std::asin(t192_tmp);
  *out4 = std::atan2(in3val1, in2val1);
  t89 = t41_tmp * t24 * t29 * t78 * t37 * 9.81;
  t91 = in10val1 * t81 + -(t246_tmp * t17 * 17.074078592196649);
  t42 = in9val1 * t24 * t69;
  t33 = in2val1 * in8val1 * t24 * t28;
  j_out1[0] = t42 * t149 * t219 * -0.0160906034646792 -
              t33 * t69 * t78 * t219 * 0.0160906034646792;
  t41 = in3val1 * in8val1 * t24 * t28;
  j_out1[1] = t42 * t145 * t219 * 0.0160906034646792 -
              t41 * t69 * t78 * t219 * 0.0160906034646792;
  t34 = in4val1 * in8val1 * t24 * t45;
  j_out1[2] = t42 * t80 * t219 * -0.0160906034646792 -
              t34 * t69 * t219 * 0.0160906034646792;
  t42 = in10val1 * t2 * t5 * t7 * t16 * t36 * t79 -
        t246_tmp * t48 * 17.074078592196649;
  t48 = t49 * t16 * t36 * t79;
  t49 = in2val1 * t24 * t28;
  t35 = t49 * t78;
  j_out1[3] = ((((((t92 + t81 * t193 * 9.81) + t24 * t194 * t228 * 9.81) +
                  t40 * t42 * 9.81) -
                 t35 * t39 * 9.81) -
                t12 * t24 * t29 * t78 * t37 * 9.81) -
               t48 * t144 * 9.81) +
              in2val1 * t2 * t7 * t16 * t24 * t28 * t36 * t79 * t37 * 9.81;
  t26 = in3val1 * t24 * t28;
  t30 = t26 * t78;
  j_out1[4] = (((((-t89 + t81 * t181 * 9.81) - t24 * t182 * t228 * 9.81) -
                 t88 * t42 * 9.81) -
                t30 * t39 * 9.81) +
               t48 * t148 * 9.81) +
              in3val1 * t2 * t7 * t16 * t24 * t28 * t36 * t79 * t37 * 9.81;
  j_out1[5] = (((t204 * t42 * 9.81 - t207 * t39 * 9.81) +
                t249_tmp * t21 * t36 * 19.62) -
               t181_tmp * t24 * t46 * t37 * 9.81) -
              b_t249_tmp * t16 * t24 * t36 * t79 * t228 * 9.81;
  t42 = in10val1 * t3 * t5 * t8 * t16 * t36 * t79 -
        t246_tmp * t250 * 17.074078592196649;
  t48 = t250_tmp * t16 * t36 * t79;
  j_out1[6] = (((((-t89 + t81 * t184 * 9.81) - t24 * t183 * t228 * 9.81) +
                 t40 * t42 * 9.81) -
                t35 * t256 * 9.81) -
               t48 * t144 * 9.81) +
              in2val1 * t3 * t8 * t16 * t24 * t28 * t36 * t79 * t37 * 9.81;
  j_out1[7] = ((((((t92 - t81 * t195 * 9.81) - t24 * t192 * t228 * 9.81) -
                  t88 * t42 * 9.81) -
                 t30 * t256 * 9.81) -
                t14 * t24 * t29 * t78 * t37 * 9.81) +
               t48 * t148 * 9.81) +
              in3val1 * t3 * t8 * t16 * t24 * t28 * t36 * t79 * t37 * 9.81;
  j_out1[8] = (((t204 * t42 * 9.81 - t207 * t256 * 9.81) +
                b_t250_tmp * t21 * t36 * 19.62) -
               t183_tmp * t24 * t46 * t37 * 9.81) -
              c_t250_tmp * t16 * t24 * t36 * t79 * t228 * 9.81;
  t42 = in10val1 * t5 * t79 * t139 / 2.0 - t246_tmp * t244 * 17.074078592196649;
  t48 = t10 * t79 * t139;
  j_out1[9] =
      ((((t81 * t168 * -9.81 + t24 * t166 * t228 * 9.81) - t40 * t42 * 9.81) +
        t48 * t144 * 4.905) +
       t35 * t38 * 9.81) -
      t49 * t79 * t139 * t37 * 4.905;
  j_out1[10] =
      ((((t81 * t169 * -9.81 + t24 * t167 * t228 * 9.81) + t88 * t42 * 9.81) -
        t48 * t148 * 4.905) +
       t30 * t38 * 9.81) -
      t26 * t79 * t139 * t37 * 4.905;
  j_out1[11] =
      ((((t21 * t139 * -9.81 + t24 * t45 * t37 * 9.81) - t204 * t42 * 9.81) +
        t207 * t38 * 9.81) +
       t5 * t24 * t79 * t139 * t228 * 4.905) -
      t166_tmp * t24 * t46 * t37 * 9.81;
  j_out1[12] =
      (((t80 * t144 * -9.81 + t81 * t149 * 9.81) - t24 * t144 * t228 * 9.81) -
       t40 * t91 * 9.81) +
      t33 * t70 * t78 * t17 * 167.4967109894491;
  j_out1[13] =
      (((t81 * t145 * -9.81 + t80 * t148 * 9.81) + t24 * t148 * t228 * 9.81) +
       t88 * t91 * 9.81) +
      t41 * t70 * t78 * t17 * 167.4967109894491;
  j_out1[14] = ((t5 * t10 * (t57 - 1.0) * -19.62 + t24 * t81 * t228 * 9.81) -
                t204 * t91 * 9.81) +
               t34 * t70 * t17 * 167.4967109894491;
  j_out1[15] = 0.0;
  j_out1[16] = 0.0;
  j_out1[17] = 0.0;
  t42 = t11 * t24;
  j_out1[18] = t42 * t149 * -9.81 + in2val1 * t6 * t24 * t28 * t78 * 9.81;
  j_out1[19] = t42 * t145 * 9.81 + in3val1 * t6 * t24 * t28 * t78 * 9.81;
  j_out1[20] = t42 * t80 * -9.81 + in4val1 * t6 * t24 * t45 * 9.81;
  j_out1[21] = t49 * t70 * t78 * t219 * -167.4967109894491;
  j_out1[22] = t26 * t70 * t78 * t219 * -167.4967109894491;
  j_out1[23] = t207 * t70 * t219 * -167.4967109894491;
  t42 = t24 * t70;
  j_out1[24] = t42 * t149 * t219 * -167.4967109894491;
  j_out1[25] = t42 * t145 * t219 * 167.4967109894491;
  j_out1[26] = t42 * t80 * t219 * -167.4967109894491;
  j_out1[27] = ((t204 * t149 * 9.81 + t25 * t149 * t228 * 9.81) -
                in2val1 * t25 * t28 * t78 * t37 * 9.81) +
               in2val1 * in4val1 * t24 * t28 * t45 * t78 * 9.81;
  j_out1[28] = ((t204 * t145 * -9.81 - t25 * t145 * t228 * 9.81) -
                in3val1 * t25 * t28 * t78 * t37 * 9.81) +
               in3val1 * in4val1 * t24 * t28 * t45 * t78 * 9.81;
  j_out1[29] = ((t24 * t57 * 9.81 - t5 * t5 * t24 * (t57 - 1.0) * 9.81) +
                t25 * t80 * t228 * 9.81) -
               in4val1 * t25 * t45 * t37 * 9.81;
  t42 = t22 * t24;
  j_out1[30] = t42 * t149 * -9.81 - in2val1 * t23 * t24 * t28 * t78 * 9.81;
  j_out1[31] = t42 * t145 * 9.81 - in3val1 * t23 * t24 * t28 * t78 * 9.81;
  j_out1[32] = t42 * t80 * -9.81 - in4val1 * t23 * t24 * t45 * 9.81;
  j_out1[33] = 0.0;
  j_out1[34] = 0.0;
  j_out1[35] = 0.0;
  j_out2[0] = 0.0;
  j_out2[1] = 0.0;
  j_out2[2] = 0.0;
  j_out2[3] = 0.0;
  j_out2[4] = 0.0;
  j_out2[5] = 0.0;
  j_out2[6] = -in12val1;
  j_out2[7] = 0.0;
  j_out2[8] = 0.0;
  j_out2[9] = 0.0;
  j_out2[10] = 0.0;
  j_out2[11] = -in7val1;
  j_out3[0] = 0.0;
  j_out3[1] = t181_tmp * t46 * t79;
  j_out3[2] = t183_tmp * t46 * t79;
  j_out3[3] = -t79 * (t45 - t167_tmp);
  std::memset(&j_out3[4], 0, 8U * sizeof(double));
  j_out4[0] = 0.0;
  j_out4[1] = -in3val1 * t27;
  j_out4[2] = in2val1 * t27;
  std::memset(&j_out4[3], 0, 9U * sizeof(double));
}

void mb_OptimalManeuver(const double states[11], const double controls[3],
                        double statesdot[11], double outputs[8],
                        double j_statesdot[154], double j_outputs[112])
{
  static const signed char iv[121]{
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};
  static const signed char a[9]{1, 0, 0, 0, 1, 0, 0, 0, 1};
  static const signed char b_a[6]{-10, 0, 0, 10, 0, 0};
  static const signed char c_a[6]{0, -10, 0, 0, 10, 0};
  static const signed char d_a[6]{0, 0, -10, 0, 0, 10};
  double tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[168];
  double tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[98];
  double j_vdot_PE[42];
  double b_j_vdot_PE[36];
  double j_CD[14];
  double j_CL[14];
  double j_T[14];
  double j_alpha[14];
  double j_Wdot_P[12];
  double j_gamma_P[12];
  double j_psi_P[12];
  double c_states[7];
  double b_states[5];
  double vdot_PE[3];
  double CD;
  double CL;
  double T;
  double ab_states_tmp;
  double alpha;
  double alpha_tmp;
  double alpha_tmp_tmp;
  double b_alpha_tmp;
  double b_alpha_tmp_tmp;
  double b_states_tmp;
  double bb_states_tmp;
  double c_alpha_tmp;
  double c_alpha_tmp_tmp;
  double c_states_tmp;
  double cb_states_tmp;
  double d_alpha_tmp;
  double d_alpha_tmp_tmp;
  double d_states_tmp;
  double db_states_tmp;
  double e_alpha_tmp;
  double e_alpha_tmp_tmp;
  double e_states_tmp;
  double eb_states_tmp;
  double f_alpha_tmp;
  double f_alpha_tmp_tmp;
  double f_states_tmp;
  double fb_states_tmp;
  double g_alpha_tmp;
  double g_alpha_tmp_tmp;
  double g_states_tmp;
  double gb_states_tmp;
  double h_alpha_tmp;
  double h_alpha_tmp_tmp;
  double h_states_tmp;
  double hb_states_tmp;
  double i_alpha_tmp_tmp;
  double i_states_tmp;
  double ib_states_tmp;
  double j_alpha_tmp_tmp;
  double jb_states_tmp;
  double k_states_tmp;
  double kb_states_tmp;
  double l_states_tmp;
  double lb_states_tmp;
  double m_states_tmp;
  double mb_states_tmp;
  double n_states_tmp;
  double nb_states_tmp;
  double o_states_tmp;
  double ob_states_tmp;
  double p_states_tmp;
  double pb_states_tmp;
  double q_states_tmp;
  double r_states_tmp;
  double s_states_tmp;
  double states_tmp;
  double t15_tmp;
  double t35;
  double t36;
  double t39;
  double t8_tmp;
  double t_states_tmp;
  double u_states_tmp;
  double v_states_tmp;
  double w_states_tmp;
  double x_states_tmp;
  double y_states_tmp;
  int i;
  int i1;
  int j_states_tmp;
  signed char j_states[154];
  signed char tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[84];
  signed char tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[70];
  signed char j_controls[42];
  signed char j_rdot_PE[42];
  signed char i2;
  signed char i3;
  signed char i4;
  // mb_OptimalManeuver
  //  File automatically generated by FALCON.m
  // === Extract Data From Input ==============================================
  // === Jacobians and Hessians ===============================================
  std::memset(&j_states[0], 0, 154U * sizeof(signed char));
  for (i = 0; i < 11; i++) {
    for (i1 = 0; i1 < 11; i1++) {
      j_states_tmp = i1 + 11 * i;
      j_states[j_states_tmp] = iv[j_states_tmp];
    }
  }
  for (i = 0; i < 42; i++) {
    j_controls[i] = 0;
  }
  for (i = 0; i < 3; i++) {
    j_states_tmp = 3 * (i + 11);
    j_controls[j_states_tmp] = a[3 * i];
    j_controls[j_states_tmp + 1] = a[3 * i + 1];
    j_controls[j_states_tmp + 2] = a[3 * i + 2];
  }
  // === Write Constants ======================================================
  // === Subsystem sysPositionPropagation =====================================
  //  Defined at main (main.m:46)
  //  Call sys_70f1ab52b326654d8650384e6c66097e_jac
  // SYS_70F1AB52B326654D8650384E6C66097E_JAC
  //     [OUT1,J_OUT1,H_OUT1] =
  //     SYS_70F1AB52B326654D8650384E6C66097E_JAC(IN1VAL1,IN2VAL1,IN3VAL1) This
  //     function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:30:34
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[3 1]}
  // Constant outputs : false
  //  Hessian Jacobian for sys_70f1ab52b326654d8650384e6c66097e_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_70f1ab52b326654d8650384e6c66097e_jac
  for (i = 0; i < 14; i++) {
    j_vdot_PE[3 * i] = j_states[11 * i + 3];
    j_vdot_PE[3 * i + 1] = j_states[11 * i + 4];
    j_vdot_PE[3 * i + 2] = j_states[11 * i + 5];
  }
  for (i = 0; i < 3; i++) {
    i2 = a[i];
    i3 = a[i + 3];
    i4 = a[i + 6];
    for (i1 = 0; i1 < 14; i1++) {
      j_rdot_PE[i + 3 * i1] = static_cast<signed char>(
          (i2 * static_cast<int>(j_vdot_PE[3 * i1]) +
           i3 * static_cast<int>(j_vdot_PE[3 * i1 + 1])) +
          i4 * static_cast<int>(j_vdot_PE[3 * i1 + 2]));
    }
  }
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double t18;
  double t19;
  double t20;
  double t21;
  double t22;
  double t25;
  double t26;
  double t27;
  double t28;
  double t29;
  double t30;
  double t31;
  double t32;
  double t33;
  double t34;
  double t37;
  double t41;
  double t43;
  double t45;
  double t47;
  double t49;
  double t5;
  double t51;
  double t53;
  double t55;
  double t6;
  double t7;
  double t8;
  double t9;
  // === Subsystem sysThrustCalc ==============================================
  //  Defined at main (main.m:56)
  //  Call sys_b653047fe439321d85b8e4c67c1d239e_jac
  // SYS_B653047FE439321D85B8E4C67C1D239E_JAC
  //     [OUT1,OUT2,J_OUT1,J_OUT2,H_OUT1,H_OUT2] =
  //     SYS_B653047FE439321D85B8E4C67C1D239E_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:30:34
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1]}
  // Constant outputs : [false true]
  t6 = states[2] * 2.2557695644629531E-5;
  t8_tmp =
      (states[3] * states[3] + states[4] * states[4]) + states[5] * states[5];
  t8 = std::sqrt(t8_tmp);
  t11 = std::pow(t6 + 1.0, 4.2586437952291609);
  t13 = 1.0 / std::sqrt(states[2] * 2.6117 + 115778.67);
  t10 = 1.0 / t8;
  t15_tmp = t8 * t13 * 0.35 + 1.0;
  T = states[9] * t11 * t15_tmp * 88980.389911198668;
  //  Hessian Jacobian for sys_b653047fe439321d85b8e4c67c1d239e_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_b653047fe439321d85b8e4c67c1d239e_jac
  b_states[0] = states[9] * std::pow(t6 + 1.0, 3.2586437952291609) * t15_tmp *
                    8.54791811574036 -
                states[9] * t8 * t11 * std::pow(t13, 3.0) * 40668.264757938567;
  b_states[1] = states[3] * states[9] * t10 * t11 * t13 * 31143.136468919529;
  b_states[2] = states[4] * states[9] * t10 * t11 * t13 * 31143.136468919529;
  b_states[3] = states[5] * states[9] * t10 * t11 * t13 * 31143.136468919529;
  b_states[4] = t11 * t15_tmp * 88980.389911198668;
  // === Subsystem sysAeroCalc ================================================
  //  Defined at main (main.m:51)
  //  Call sys_ae427af578a359dbc76e23f19598e1e5_jac
  // SYS_AE427AF578A359DBC76E23F19598E1E5_JAC
  //     [OUT1,OUT2,OUT3,OUT4,J_OUT1,J_OUT2,J_OUT3,J_OUT4,H_OUT1,H_OUT2,H_OUT3,H_OUT4]
  //     =
  //     SYS_AE427AF578A359DBC76E23F19598E1E5_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1,IN7VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     20-Jan-2023 10:51:26
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1], [1 1], [1 1]}
  // Constant outputs : [false false false false]
  t5 = states[10] * states[10];
  t6 = std::pow(states[10], 3.0);
  t8 = std::pow(states[10], 5.0);
  t10 = std::pow(states[10], 7.0);
  t11 = states[7] * states[7];
  t12 = std::pow(states[7], 3.0);
  t14 = std::pow(states[7], 5.0);
  t16 = std::pow(states[7], 7.0);
  t7 = t5 * t5;
  t9 = std::pow(t5, 3.0);
  t13 = t11 * t11;
  t15 = std::pow(t11, 3.0);
  t18 = std::pow(t6, 3.0);
  t19 = std::pow(t5, 5.0);
  t21 = std::pow(t12, 3.0);
  t22 = std::pow(t11, 5.0);
  t36 = states[2] * 2.2557695644629531E-5 + 1.0;
  t17 = t7 * t7;
  t20 = t13 * t13;
  t25 = 1.0 / t8_tmp;
  t37 = 1.0 / std::pow(t36, 29.810506566604129);
  t39 = 1.0 / std::pow(t36, 4.2586437952291609);
  t26 = t25 * t25;
  t27 = std::pow(t25, 3.0);
  t29 = std::pow(t25, 5.0);
  t31 = std::pow(t25, 7.0);
  t35 = std::pow(t25, 11.0);
  t41 = t39 * t39;
  t43 = std::pow(t39, 3.0);
  t47 = std::pow(t39, 5.0);
  t28 = t26 * t26;
  t30 = std::pow(t26, 3.0);
  t33 = std::pow(t27, 3.0);
  t34 = std::pow(t26, 5.0);
  t45 = t41 * t41;
  t49 = std::pow(t41, 3.0);
  t53 = std::pow(t43, 3.0);
  t55 = std::pow(t41, 5.0);
  t32 = t28 * t28;
  t51 = t45 * t45;
  alpha_tmp_tmp = states[7] * states[10] * t25;
  t15_tmp = alpha_tmp_tmp * t39;
  b_alpha_tmp_tmp = t5 * t11 * t26;
  alpha_tmp = b_alpha_tmp_tmp * t41;
  c_alpha_tmp_tmp = t6 * t12 * t27;
  t8_tmp = c_alpha_tmp_tmp * t43;
  d_alpha_tmp_tmp = t7 * t13 * t28;
  b_alpha_tmp = d_alpha_tmp_tmp * t45;
  e_alpha_tmp_tmp = t10 * t16 * t31;
  c_alpha_tmp = e_alpha_tmp_tmp * t37;
  f_alpha_tmp_tmp = t8 * t14 * t29;
  d_alpha_tmp = f_alpha_tmp_tmp * t47;
  g_alpha_tmp_tmp = t9 * t15 * t30;
  e_alpha_tmp = g_alpha_tmp_tmp * t49;
  h_alpha_tmp_tmp = t17 * t20 * t32;
  f_alpha_tmp = h_alpha_tmp_tmp * t51;
  i_alpha_tmp_tmp = t18 * t21 * t33;
  g_alpha_tmp = i_alpha_tmp_tmp * t53;
  j_alpha_tmp_tmp = t19 * t22 * t34;
  h_alpha_tmp = j_alpha_tmp_tmp * t55;
  alpha =
      ((((t15_tmp * 0.014345619572951881 + alpha_tmp * 9.260716983790664E-5) +
         t8_tmp * -1.5347140792949311E-5) +
        (b_alpha_tmp * 3.7537393593212812E-6 +
         c_alpha_tmp * 6.8569306861973568E-10)) +
       ((((d_alpha_tmp * 1.0170526449357679E-7 +
           e_alpha_tmp * -3.5462236672989408E-8) +
          f_alpha_tmp * 9.3388466194067771E-11) +
         g_alpha_tmp * -4.71752534419257E-12) +
        h_alpha_tmp * 6.3607941133378246E-14)) +
      -0.027385456961207789;
  CL = t15_tmp * 0.05856831421972189;
  CD = ((((t15_tmp * -0.0028263146667897089 +
           alpha_tmp * 0.00025138714998666339) +
          t8_tmp * -3.6783410110134163E-5) +
         (b_alpha_tmp * 1.05807779465885E-5 +
          c_alpha_tmp * 1.8045782307252909E-9)) +
        ((((d_alpha_tmp * 2.8999706422462358E-7 +
            e_alpha_tmp * -9.5414298683523566E-8) +
           f_alpha_tmp * 2.5073064367535648E-10) +
          g_alpha_tmp * -1.26219015064533E-11) +
         h_alpha_tmp * 1.7014739458514929E-13)) +
       0.027612476522558611;
  //  Hessian Jacobian for sys_ae427af578a359dbc76e23f19598e1e5_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_ae427af578a359dbc76e23f19598e1e5_jac
  states_tmp = alpha_tmp_tmp * (1.0 / std::pow(t36, 5.2586437952291609));
  b_states_tmp = b_alpha_tmp_tmp * (1.0 / std::pow(t36, 9.5172875904583218));
  c_states_tmp = c_alpha_tmp_tmp * (1.0 / std::pow(t36, 13.77593138568748));
  d_states_tmp = d_alpha_tmp_tmp * (1.0 / std::pow(t36, 18.03457518091664));
  e_states_tmp = e_alpha_tmp_tmp * (1.0 / std::pow(t36, 30.810506566604129));
  f_states_tmp = f_alpha_tmp_tmp * (1.0 / std::pow(t36, 22.293218976145809));
  g_states_tmp = g_alpha_tmp_tmp * (1.0 / std::pow(t36, 26.551862771374971));
  h_states_tmp = h_alpha_tmp_tmp * (1.0 / std::pow(t36, 35.069150361833287));
  i_states_tmp = i_alpha_tmp_tmp * (1.0 / std::pow(t36, 39.327794157062449));
  k_states_tmp = j_alpha_tmp_tmp * (1.0 / std::pow(t36, 43.586437952291611));
  c_states[0] = ((((states_tmp * -1.3781146784312059E-6 -
                    b_states_tmp * 1.77926508412672E-8) +
                   c_states_tmp * 4.4229780159355821E-9) +
                  (d_states_tmp * -1.4424147479386E-9 +
                   e_states_tmp * -4.61098647270391E-13)) +
                 ((f_states_tmp * -4.8851678088758041E-11 +
                   g_states_tmp * 2.04401191487857E-11) +
                  h_states_tmp * -7.17710464319744E-14)) +
                (i_states_tmp * 4.0787097417980116E-15 +
                 k_states_tmp * -6.1105089881216707E-17);
  l_states_tmp = states[3] * states[10] * states[7] * t26 * t39;
  m_states_tmp = states[3] * t5 * t11 * t27 * t41;
  n_states_tmp = states[3] * t6 * t12 * t28 * t43;
  o_states_tmp = states[3] * t7 * t13 * t29 * t45;
  p_states_tmp = states[3] * t10 * t16 * t32 * t37;
  q_states_tmp = states[3] * t8 * t14 * t30 * t47;
  r_states_tmp = states[3] * t9 * t15 * t31 * t49;
  s_states_tmp = states[3] * t17 * t20 * t33 * t51;
  t_states_tmp = states[3] * t18 * t21 * t34 * t53;
  u_states_tmp = states[3] * t19 * t22 * t35 * t55;
  c_states[1] = (((l_states_tmp * -0.028691239145903762 -
                   m_states_tmp * 0.00037042867935162651) +
                  n_states_tmp * 9.2082844757695887E-5) +
                 (o_states_tmp * -3.0029914874570249E-5 +
                  p_states_tmp * -9.5997029606763E-9)) +
                ((((q_states_tmp * -1.017052644935768E-6 +
                    r_states_tmp * 4.2554684007587289E-7) +
                   s_states_tmp * -1.4942154591050839E-9) +
                  t_states_tmp * 8.4915456195466259E-11) +
                 u_states_tmp * -1.272158822667565E-12);
  v_states_tmp = states[4] * states[10] * states[7] * t26 * t39;
  w_states_tmp = states[4] * t5 * t11 * t27 * t41;
  x_states_tmp = states[4] * t6 * t12 * t28 * t43;
  y_states_tmp = states[4] * t7 * t13 * t29 * t45;
  ab_states_tmp = states[4] * t10 * t16 * t32 * t37;
  bb_states_tmp = states[4] * t8 * t14 * t30 * t47;
  cb_states_tmp = states[4] * t9 * t15 * t31 * t49;
  db_states_tmp = states[4] * t17 * t20 * t33 * t51;
  eb_states_tmp = states[4] * t18 * t21 * t34 * t53;
  fb_states_tmp = states[4] * t19 * t22 * t35 * t55;
  c_states[2] = (((v_states_tmp * -0.028691239145903762 -
                   w_states_tmp * 0.00037042867935162651) +
                  x_states_tmp * 9.2082844757695887E-5) +
                 (y_states_tmp * -3.0029914874570249E-5 +
                  ab_states_tmp * -9.5997029606763E-9)) +
                ((((bb_states_tmp * -1.017052644935768E-6 +
                    cb_states_tmp * 4.2554684007587289E-7) +
                   db_states_tmp * -1.4942154591050839E-9) +
                  eb_states_tmp * 8.4915456195466259E-11) +
                 fb_states_tmp * -1.272158822667565E-12);
  gb_states_tmp = states[5] * states[10] * states[7] * t26 * t39;
  hb_states_tmp = states[5] * t5 * t11 * t27 * t41;
  ib_states_tmp = states[5] * t6 * t12 * t28 * t43;
  jb_states_tmp = states[5] * t7 * t13 * t29 * t45;
  kb_states_tmp = states[5] * t10 * t16 * t32 * t37;
  lb_states_tmp = states[5] * t8 * t14 * t30 * t47;
  mb_states_tmp = states[5] * t9 * t15 * t31 * t49;
  nb_states_tmp = states[5] * t17 * t20 * t33 * t51;
  ob_states_tmp = states[5] * t18 * t21 * t34 * t53;
  c_alpha_tmp_tmp = states[5] * t19 * t22 * t35 * t55;
  c_states[3] = (((gb_states_tmp * -0.028691239145903762 -
                   hb_states_tmp * 0.00037042867935162651) +
                  ib_states_tmp * 9.2082844757695887E-5) +
                 (jb_states_tmp * -3.0029914874570249E-5 +
                  kb_states_tmp * -9.5997029606763E-9)) +
                ((((lb_states_tmp * -1.017052644935768E-6 +
                    mb_states_tmp * 4.2554684007587289E-7) +
                   nb_states_tmp * -1.4942154591050839E-9) +
                  ob_states_tmp * 8.4915456195466259E-11) +
                 c_alpha_tmp_tmp * -1.272158822667565E-12);
  d_alpha_tmp_tmp = states[7] * t25 * t39;
  e_alpha_tmp_tmp = states[10] * t11 * t26 * t41;
  f_alpha_tmp_tmp = t5 * t12 * t27 * t43;
  g_alpha_tmp_tmp = t6 * t13 * t28 * t45;
  h_alpha_tmp_tmp = t9 * t16 * t31 * t37;
  i_alpha_tmp_tmp = t7 * t14 * t29 * t47;
  j_alpha_tmp_tmp = t8 * t15 * t30 * t49;
  t35 = t10 * t20 * t32 * t51;
  pb_states_tmp = t17 * t21 * t33 * t53;
  b_alpha_tmp_tmp = t18 * t22 * t34 * t55;
  c_states[4] = (((d_alpha_tmp_tmp * 0.014345619572951881 +
                   e_alpha_tmp_tmp * 0.00018521433967581331) +
                  f_alpha_tmp_tmp * -4.6041422378847943E-5) +
                 (g_alpha_tmp_tmp * 1.501495743728512E-5 +
                  h_alpha_tmp_tmp * 4.79985148033815E-9)) +
                ((((i_alpha_tmp_tmp * 5.0852632246788423E-7 +
                    j_alpha_tmp_tmp * -2.127734200379365E-7) +
                   t35 * 7.4710772955254217E-10) +
                  pb_states_tmp * -4.2457728097733129E-11) +
                 b_alpha_tmp_tmp * 6.3607941133378249E-13);
  c_states[5] = 0.0;
  alpha_tmp_tmp = states[10] * t25 * t39;
  h_alpha_tmp = states[7] * t5 * t26 * t41;
  g_alpha_tmp = t6 * t11 * t27 * t43;
  f_alpha_tmp = t7 * t12 * t28 * t45;
  e_alpha_tmp = t10 * t15 * t31 * t37;
  d_alpha_tmp = t8 * t13 * t29 * t47;
  c_alpha_tmp = t9 * t14 * t30 * t49;
  alpha_tmp = t16 * t17 * t32 * t51;
  t8_tmp = t18 * t20 * t33 * t53;
  t15_tmp = t19 * t21 * t34 * t55;
  c_states[6] = (((alpha_tmp_tmp * 0.014345619572951881 +
                   h_alpha_tmp * 0.00018521433967581331) +
                  g_alpha_tmp * -4.6041422378847943E-5) +
                 (f_alpha_tmp * 1.501495743728512E-5 +
                  e_alpha_tmp * 4.79985148033815E-9)) +
                ((((d_alpha_tmp * 5.0852632246788423E-7 +
                    c_alpha_tmp * -2.127734200379365E-7) +
                   alpha_tmp * 7.4710772955254217E-10) +
                  t8_tmp * -4.2457728097733129E-11) +
                 t15_tmp * 6.3607941133378249E-13);
  for (i = 0; i < 14; i++) {
    signed char i5;
    i2 = j_states[11 * i + 2];
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i] = i2;
    i3 = j_states[11 * i + 3];
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i + 1] = i3;
    i4 = j_states[11 * i + 4];
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i + 2] = i4;
    i5 = j_states[11 * i + 5];
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i + 3] = i5;
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i + 4] =
        j_states[11 * i + 9];
    b_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 5; i1++) {
      b_alpha_tmp +=
          b_states[i1] *
          static_cast<double>(
              tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[i1 + 5 * i]);
    }
    j_T[i] = b_alpha_tmp;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i] = i2;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 1] = i3;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 2] = i4;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 3] = i5;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 4] =
        j_states[11 * i + 10];
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 5] =
        b_alpha_tmp;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 6] =
        j_states[11 * i + 7];
    b_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      b_alpha_tmp +=
          c_states[i1] *
          tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[i1 + 7 * i];
    }
    j_alpha[i] = b_alpha_tmp;
  }
  c_states[0] = states_tmp * -5.6263762681503669E-6;
  c_states[1] = l_states_tmp * -0.11713662843944379;
  c_states[2] = v_states_tmp * -0.11713662843944379;
  c_states[3] = gb_states_tmp * -0.11713662843944379;
  c_states[4] = d_alpha_tmp_tmp * 0.05856831421972189;
  c_states[5] = 0.0;
  c_states[6] = alpha_tmp_tmp * 0.05856831421972189;
  for (i = 0; i < 14; i++) {
    b_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      b_alpha_tmp +=
          c_states[i1] *
          tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[i1 + 7 * i];
    }
    j_CL[i] = b_alpha_tmp;
  }
  c_states[0] = ((((states_tmp * 2.7151045713718412E-7 -
                    b_states_tmp * 4.8299108951530809E-8) +
                   c_states_tmp * 1.0600815908524741E-8) +
                  (d_states_tmp * -4.0657778001886287E-9 +
                   e_states_tmp * -1.213500061705419E-12)) +
                 ((f_states_tmp * -1.392931162288153E-10 +
                   g_states_tmp * 5.4995956729218991E-11) +
                  h_states_tmp * -1.9269189657476059E-13)) +
                (i_states_tmp * 1.0912728364620441E-14 +
                 k_states_tmp * -1.634524188949835E-16);
  c_states[1] = ((((l_states_tmp * 0.0056526293335794186 -
                    m_states_tmp * 0.0010055485999466529) +
                   n_states_tmp * 0.000220700460660805) +
                  (o_states_tmp * -8.4646223572708024E-5 +
                   p_states_tmp * -2.5264095230154079E-8)) +
                 (((q_states_tmp * -2.8999706422462361E-6 +
                    r_states_tmp * 1.144971584202283E-6) +
                   s_states_tmp * -4.0116902988057029E-9) +
                  t_states_tmp * 2.2719422711615941E-10)) +
                u_states_tmp * -3.402947891702986E-12;
  c_states[2] = ((((v_states_tmp * 0.0056526293335794186 -
                    w_states_tmp * 0.0010055485999466529) +
                   x_states_tmp * 0.000220700460660805) +
                  (y_states_tmp * -8.4646223572708024E-5 +
                   ab_states_tmp * -2.5264095230154079E-8)) +
                 (((bb_states_tmp * -2.8999706422462361E-6 +
                    cb_states_tmp * 1.144971584202283E-6) +
                   db_states_tmp * -4.0116902988057029E-9) +
                  eb_states_tmp * 2.2719422711615941E-10)) +
                fb_states_tmp * -3.402947891702986E-12;
  c_states[3] = ((((gb_states_tmp * 0.0056526293335794186 -
                    hb_states_tmp * 0.0010055485999466529) +
                   ib_states_tmp * 0.000220700460660805) +
                  (jb_states_tmp * -8.4646223572708024E-5 +
                   kb_states_tmp * -2.5264095230154079E-8)) +
                 (((lb_states_tmp * -2.8999706422462361E-6 +
                    mb_states_tmp * 1.144971584202283E-6) +
                   nb_states_tmp * -4.0116902988057029E-9) +
                  ob_states_tmp * 2.2719422711615941E-10)) +
                c_alpha_tmp_tmp * -3.402947891702986E-12;
  c_states[4] = (((d_alpha_tmp_tmp * -0.0028263146667897089 +
                   e_alpha_tmp_tmp * 0.00050277429997332666) +
                  f_alpha_tmp_tmp * -0.0001103502303304025) +
                 (g_alpha_tmp_tmp * 4.2323111786354012E-5 +
                  h_alpha_tmp_tmp * 1.263204761507704E-8)) +
                ((((i_alpha_tmp_tmp * 1.449985321123118E-6 +
                    j_alpha_tmp_tmp * -5.7248579210114139E-7) +
                   t35 * 2.0058451494028519E-9) +
                  pb_states_tmp * -1.135971135580797E-10) +
                 b_alpha_tmp_tmp * 1.701473945851493E-12);
  c_states[5] = 0.0;
  c_states[6] = (((alpha_tmp_tmp * -0.0028263146667897089 +
                   h_alpha_tmp * 0.00050277429997332666) +
                  g_alpha_tmp * -0.0001103502303304025) +
                 (f_alpha_tmp * 4.2323111786354012E-5 +
                  e_alpha_tmp * 1.263204761507704E-8)) +
                ((((d_alpha_tmp * 1.449985321123118E-6 +
                    c_alpha_tmp * -5.7248579210114139E-7) +
                   alpha_tmp * 2.0058451494028519E-9) +
                  t8_tmp * -1.135971135580797E-10) +
                 t15_tmp * 1.701473945851493E-12);
  // === Subsystem sysTranslationPropagation ==================================
  //  Defined at main (main.m:61)
  //  Call sys_3f22f56eae30e66f37b93157a10b4364_jac
  sys_3f22f56eae30e66f37b93157a10b4364_jac(
      states[2], states[3], states[4], states[5], states[6], T, CD, CL,
      states[7], alpha, 0.0002138, vdot_PE, &t8_tmp, &alpha_tmp, &t15_tmp,
      b_j_vdot_PE, j_Wdot_P, j_gamma_P, j_psi_P);
  //  Hessian Jacobian for sys_3f22f56eae30e66f37b93157a10b4364_jac
  for (i = 0; i < 14; i++) {
    b_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      b_alpha_tmp +=
          c_states[i1] *
          tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[i1 + 7 * i];
    }
    j_CD[i] = b_alpha_tmp;
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i] =
        j_states[11 * i + 2];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 1] =
        j_states[11 * i + 3];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 2] =
        j_states[11 * i + 4];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 3] =
        j_states[11 * i + 5];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 4] =
        j_states[11 * i + 6];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 5] =
        j_states[11 * i + 8];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 6] = j_T[i];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 7] =
        b_alpha_tmp;
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 8] = j_CL[i];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 9] =
        j_states[11 * i + 7];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 10] =
        j_alpha[i];
    tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[12 * i + 11] = 0.0;
  }
  //  Calculation of Jacobian with respect to function global input for
  //  sys_3f22f56eae30e66f37b93157a10b4364_jac
  for (i = 0; i < 3; i++) {
    for (i1 = 0; i1 < 14; i1++) {
      b_alpha_tmp = 0.0;
      for (j_states_tmp = 0; j_states_tmp < 12; j_states_tmp++) {
        b_alpha_tmp +=
            b_j_vdot_PE[i + 3 * j_states_tmp] *
            tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[j_states_tmp +
                                                                 12 * i1];
      }
      j_vdot_PE[i + 3 * i1] = b_alpha_tmp;
    }
  }
  // === Subsystem sysCommandsDelay ===========================================
  //  Defined at main (main.m:66)
  //  Call sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  // SYS_2E11DA000B4BBADF99D6DD9A0951F18B_JAC
  //     [OUT1,OUT2,OUT3,J_OUT1,J_OUT2,J_OUT3,H_OUT1,H_OUT2,H_OUT3] =
  //     SYS_2E11DA000B4BBADF99D6DD9A0951F18B_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:30:46
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1], [1 1]}
  // Constant outputs : [false false false]
  //  Hessian Jacobian for sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  // === Split Variable rdot_PE ===============================================
  // === Split Variable vdot_PE ===============================================
  //  Combine Variables to statesdot
  statesdot[0] = states[3];
  statesdot[1] = states[4];
  statesdot[2] = states[5];
  statesdot[3] = vdot_PE[0];
  statesdot[4] = vdot_PE[1];
  statesdot[5] = vdot_PE[2];
  statesdot[6] = states[8];
  statesdot[7] = t8_tmp;
  statesdot[8] = states[8] * -10.0 + controls[0] * 10.0;
  statesdot[9] = states[9] * -10.0 + controls[1] * 10.0;
  statesdot[10] = states[10] * -10.0 + controls[2] * 10.0;
  //  Combine Variables to outputs
  outputs[0] = alpha_tmp;
  outputs[1] = t15_tmp;
  outputs[2] = alpha;
  outputs[3] = CL;
  outputs[4] = CD;
  outputs[5] = T;
  outputs[6] = 0.0002138;
  outputs[7] = 1.2252256827617729 / t39;
  c_states[0] = std::pow(t36, 3.2586437952291609) * 0.000117701538732318;
  c_states[1] = 0.0;
  c_states[2] = 0.0;
  c_states[3] = 0.0;
  c_states[4] = 0.0;
  c_states[5] = 0.0;
  c_states[6] = 0.0;
  for (i = 0; i < 14; i++) {
    int b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    int c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    int d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    int tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    i1 = 11 * i + 8;
    i2 = j_states[i1];
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i] = i2;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 11 * i + 9;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 1] =
        j_states[tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 11 * i + 10;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 2] =
        j_states[b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 3] =
        j_controls[3 * i];
    c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 3 * i + 1;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 4] =
        j_controls[c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 3 * i + 2;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 5] =
        j_controls[d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    b_alpha_tmp = 0.0;
    for (j_states_tmp = 0; j_states_tmp < 12; j_states_tmp++) {
      b_alpha_tmp +=
          j_Wdot_P[j_states_tmp] *
          tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[j_states_tmp +
                                                               12 * i];
    }
    t15_tmp = 0.0;
    t8_tmp = 0.0;
    alpha_tmp = 0.0;
    for (j_states_tmp = 0; j_states_tmp < 6; j_states_tmp++) {
      i3 = tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[j_states_tmp +
                                                                6 * i];
      t15_tmp += static_cast<double>(b_a[j_states_tmp] * i3);
      t8_tmp += static_cast<double>(c_a[j_states_tmp] * i3);
      alpha_tmp += static_cast<double>(d_a[j_states_tmp] * i3);
    }
    j_statesdot[11 * i] = j_rdot_PE[3 * i];
    j_statesdot[11 * i + 1] =
        j_rdot_PE[c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    j_statesdot[11 * i + 2] =
        j_rdot_PE[d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    j_statesdot[11 * i + 3] = j_vdot_PE[3 * i];
    j_statesdot[11 * i + 4] =
        j_vdot_PE[c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    j_statesdot[11 * i + 5] =
        j_vdot_PE[d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    j_statesdot[11 * i + 6] = i2;
    j_statesdot[11 * i + 7] = b_alpha_tmp;
    j_statesdot[i1] = t15_tmp;
    j_statesdot[tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp] =
        t8_tmp;
    j_statesdot[b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp] =
        alpha_tmp;
    b_alpha_tmp = 0.0;
    t15_tmp = 0.0;
    for (i1 = 0; i1 < 12; i1++) {
      t8_tmp =
          tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac[i1 + 12 * i];
      b_alpha_tmp += j_gamma_P[i1] * t8_tmp;
      t15_tmp += j_psi_P[i1] * t8_tmp;
    }
    t8_tmp = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      t8_tmp +=
          c_states[i1] *
          tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[i1 + 7 * i];
    }
    j_states_tmp = i << 3;
    j_outputs[j_states_tmp] = b_alpha_tmp;
    j_outputs[j_states_tmp + 1] = t15_tmp;
    j_outputs[j_states_tmp + 2] = j_alpha[i];
    j_outputs[j_states_tmp + 3] = j_CL[i];
    j_outputs[j_states_tmp + 4] = j_CD[i];
    j_outputs[j_states_tmp + 5] = j_T[i];
    j_outputs[j_states_tmp + 6] = 0.0;
    j_outputs[j_states_tmp + 7] = t8_tmp;
  }
}

void mb_OptimalManeuver_initialize()
{
}

void mb_OptimalManeuver_terminate()
{
  // (no terminate code required)
}

// End of code generation (mb_OptimalManeuver.cpp)
