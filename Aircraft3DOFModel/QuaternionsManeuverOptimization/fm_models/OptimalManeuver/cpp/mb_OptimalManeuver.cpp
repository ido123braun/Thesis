//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// mb_OptimalManeuver.cpp
//
// Code generation for function 'mb_OptimalManeuver'
//

// Include files
#include "mb_OptimalManeuver.h"
#include <algorithm>
#include <cmath>
#include <cstring>

// Function Declarations
static void sys_ea955d09cf58549297c8a3c36e04d747_jac(
    double in1val1, double in2val1, double in3val1, double in4val1,
    double in5val1, double in6val1, double in7val1, double in8val1,
    double in9val1, double in10val1, double in11val1, double in12val1,
    double in13val1, double in14val1, double in15val1, double out1[3],
    double *out2, double out3[4], double *out4, double *out5, double *out6,
    double out7[3], double j_out1[45], double j_out2[15], double j_out3[60],
    double j_out4[15], double j_out5[15], double j_out6[15], double j_out7[45]);

// Function Definitions
static void sys_ea955d09cf58549297c8a3c36e04d747_jac(
    double in1val1, double in2val1, double in3val1, double in4val1,
    double in5val1, double in6val1, double in7val1, double in8val1,
    double in9val1, double in10val1, double in11val1, double in12val1,
    double in13val1, double in14val1, double in15val1, double out1[3],
    double *out2, double out3[4], double *out4, double *out5, double *out6,
    double out7[3], double j_out1[45], double j_out2[15], double j_out3[60],
    double j_out4[15], double j_out5[15], double j_out6[15], double j_out7[45])
{
  double b_out1_tmp;
  double b_out3_tmp;
  double b_t186_tmp;
  double b_t188_tmp;
  double b_t190_tmp;
  double b_t191_tmp;
  double b_t325_tmp;
  double c_out1_tmp;
  double c_out3_tmp;
  double d_out1_tmp;
  double e_out1_tmp;
  double out1_tmp;
  double out3_tmp;
  double t10;
  double t100;
  double t101;
  double t103;
  double t105;
  double t106;
  double t108;
  double t11;
  double t116;
  double t117;
  double t118;
  double t119;
  double t12;
  double t125;
  double t126;
  double t127;
  double t128;
  double t13;
  double t152_tmp;
  double t184;
  double t184_tmp;
  double t185;
  double t185_tmp;
  double t186;
  double t186_tmp;
  double t187;
  double t187_tmp;
  double t188;
  double t188_tmp;
  double t190;
  double t190_tmp;
  double t191;
  double t191_tmp;
  double t192;
  double t193;
  double t194;
  double t197;
  double t198;
  double t199;
  double t2;
  double t201;
  double t202;
  double t208;
  double t209;
  double t210;
  double t218;
  double t219;
  double t221;
  double t232;
  double t233;
  double t234;
  double t244_tmp;
  double t252;
  double t253;
  double t254;
  double t255;
  double t256;
  double t257;
  double t258;
  double t259;
  double t259_tmp;
  double t262;
  double t276;
  double t279;
  double t28;
  double t280;
  double t282;
  double t3;
  double t30;
  double t309_tmp;
  double t31;
  double t313_tmp;
  double t32;
  double t320;
  double t322;
  double t325;
  double t325_tmp;
  double t326;
  double t327;
  double t328;
  double t329;
  double t33;
  double t331;
  double t332;
  double t336;
  double t338;
  double t34;
  double t344_tmp;
  double t344_tmp_tmp;
  double t345_tmp;
  double t345_tmp_tmp;
  double t346_tmp;
  double t346_tmp_tmp;
  double t35;
  double t350_tmp;
  double t350_tmp_tmp;
  double t351_tmp;
  double t351_tmp_tmp;
  double t352_tmp;
  double t352_tmp_tmp;
  double t353_tmp;
  double t353_tmp_tmp;
  double t359_tmp;
  double t36;
  double t360_tmp;
  double t365;
  double t366;
  double t367;
  double t37;
  double t370;
  double t38;
  double t39;
  double t4;
  double t40;
  double t41;
  double t42;
  double t49;
  double t5;
  double t56;
  double t57;
  double t58;
  double t6;
  double t61;
  double t62;
  double t63;
  double t64;
  double t73;
  double t74;
  double t75;
  double t80;
  double t81;
  double t82;
  double t84;
  double t85;
  double t86;
  double t87;
  double t88;
  double t94;
  double t95;
  double t97;
  double t98;
  // SYS_EA955D09CF58549297C8A3C36E04D747_JAC
  //     [OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,J_OUT1,J_OUT2,J_OUT3,J_OUT4,J_OUT5,J_OUT6,J_OUT7,H_OUT1,H_OUT2,H_OUT3,H_OUT4,H_OUT5,H_OUT6,H_OUT7]
  //     =
  //     SYS_EA955D09CF58549297C8A3C36E04D747_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1,IN7VAL1,IN8VAL1,IN9VAL1,IN10VAL1,IN11VAL1,IN12VAL1,IN13VAL1,IN14VAL1,IN15VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:25:03
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1],
  // [1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1]} Derivative inputs: [true
  // true true true true true true true true true true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[3 1], [1 1], [4 1], [1 1], [1 1], [1 1], [3 1]}
  // Constant outputs : [false false false false false false false]
  t2 = std::abs(in2val1);
  t3 = std::abs(in3val1);
  t4 = std::abs(in4val1);
  t5 = std::cos(in14val1);
  t6 = std::sin(in14val1);
  t10 = in5val1 * in5val1;
  t11 = in6val1 * in6val1;
  t12 = in7val1 * in7val1;
  t13 = in8val1 * in8val1;
  t74 = in5val1 * in6val1;
  t28 = t74 * 2.0;
  t30 = in5val1 * in7val1 * 2.0;
  t31 = in5val1 * in8val1 * 2.0;
  t32 = in6val1 * in7val1 * 2.0;
  t33 = in6val1 * in8val1 * 2.0;
  t128 = in7val1 * in8val1;
  t34 = t128 * 2.0;
  t35 = in5val1 * in13val1 * 2.0;
  t36 = in6val1 * in13val1 * 2.0;
  t37 = in7val1 * in13val1 * 2.0;
  t38 = in8val1 * in13val1 * 2.0;
  t41 = 1.0 / in13val1;
  t49 = in9val1 / 2.0;
  t73 = in1val1 * 2.2557695644629531E-5;
  t39 = in10val1 * t5;
  t40 = in10val1 * t6;
  t42 = t41 * t41;
  t56 = t28 + t34;
  t57 = t30 + t33;
  t58 = t31 + t32;
  t75 = (in2val1 * in6val1 * 2.0 + in3val1 * in7val1 * 2.0) +
        in4val1 * in8val1 * 2.0;
  t95 = t74 * 19.62 + t128 * 19.62;
  t61 = 1.0 / (in2val1 * in2val1 + in3val1 * in3val1);
  t62 = t28 + -t34;
  t63 = t30 + -t33;
  t64 = t31 + -t32;
  t74 = (t2 * t2 + t3 * t3) + t4 * t4;
  t80 = (in2val1 * in7val1 * 2.0 + in4val1 * in5val1 * 2.0) +
        -(in3val1 * in6val1 * 2.0);
  t81 = (in3val1 * in5val1 * 2.0 + in4val1 * in6val1 * 2.0) +
        -(in2val1 * in8val1 * 2.0);
  t82 = (in2val1 * in5val1 * 2.0 + in3val1 * in8val1 * 2.0) +
        -(in4val1 * in7val1 * 2.0);
  t86 = ((t10 + t13) + -t11) + -t12;
  t87 = ((t10 + t12) + -t11) + -t13;
  t88 = ((t10 + t11) + -t12) + -t13;
  t100 = in5val1 * t95 * 2.0;
  t101 = in6val1 * t95 * 2.0;
  t103 = in8val1 * t95 * 2.0;
  t105 = std::pow(t73 + 1.0, 3.2586437952291609);
  t106 = std::pow(t73 + 1.0, 4.2586437952291609);
  t116 = t75 * t95;
  t84 = 1.0 / std::sqrt(t74);
  t94 = t86 * t86;
  t97 = 1.0 / t86;
  t117 = t80 * t95;
  t118 = t81 * t95;
  t119 = t82 * t95;
  t85 = std::pow(t84, 3.0);
  t98 = 1.0 / t94;
  t125 = (in3val1 * t58 + -(in4val1 * t63)) + in2val1 * t88;
  t126 = (in4val1 * t56 + -(in2val1 * t64)) + in3val1 * t87;
  t127 = (in2val1 * t57 + -(in3val1 * t62)) + in4val1 * t86;
  t128 = std::abs(t125);
  t28 = std::abs(t126);
  t34 = std::abs(t127);
  t30 = t125;
  if (t125 < 0.0) {
    t30 = -1.0;
  } else if (t125 > 0.0) {
    t30 = 1.0;
  }
  t33 = t126;
  if (t126 < 0.0) {
    t33 = -1.0;
  } else if (t126 > 0.0) {
    t33 = 1.0;
  }
  t31 = t127;
  if (t127 < 0.0) {
    t31 = -1.0;
  } else if (t127 > 0.0) {
    t31 = 1.0;
  }
  t152_tmp = t41 * t63;
  t184_tmp = t41 * t106;
  t184 = t184_tmp * t126 * 167.4967109894491;
  t32 = in5val1 * t41;
  t185_tmp = t32 * t106;
  t185 = t185_tmp * t126 * 83.748355494724549;
  t186_tmp = in6val1 * t41;
  b_t186_tmp = t186_tmp * t106;
  t186 = b_t186_tmp * t126 * 83.748355494724549;
  t10 = in7val1 * t41;
  t187_tmp = t10 * t106;
  t187 = t187_tmp * t126 * 83.748355494724549;
  t188_tmp = in8val1 * t41;
  b_t188_tmp = t188_tmp * t106;
  t188 = b_t188_tmp * t126 * 83.748355494724549;
  t108 = 1.0 / std::sqrt(-(in4val1 * in4val1 * (1.0 / t74)) + 1.0);
  t190_tmp = t6 * t41;
  b_t190_tmp = t5 * t41;
  t190 = b_t190_tmp * t127 * 9.81 + t190_tmp * t125 * 9.81;
  t191_tmp = t39 * t41;
  b_t191_tmp = t40 * t41;
  t191 = t191_tmp * t125 * 9.81 + -(b_t191_tmp * t127 * 9.81);
  t192 = (t128 * t128 + t28 * t28) + t34 * t34;
  t255 =
      (t80 * t34 * t31 * 2.0 + t81 * t28 * t33 * 2.0) + t82 * t128 * t30 * 2.0;
  t193 = 1.0 / t192;
  t252 = (t57 * t34 * t31 * 2.0 + -(t64 * t28 * t33 * 2.0)) +
         t88 * t128 * t30 * 2.0;
  t253 = (t58 * t128 * t30 * 2.0 + -(t62 * t34 * t31 * 2.0)) +
         t87 * t28 * t33 * 2.0;
  t254 = (t56 * t28 * t33 * 2.0 + -(t63 * t128 * t30 * 2.0)) +
         t86 * t34 * t31 * 2.0;
  t256 = (t75 * t128 * t30 * 2.0 + t80 * t28 * t33 * 2.0) +
         -(t81 * t34 * t31 * 2.0);
  t257 = (t75 * t28 * t33 * 2.0 + t82 * t34 * t31 * 2.0) +
         -(t80 * t128 * t30 * 2.0);
  t258 = (t75 * t34 * t31 * 2.0 + t81 * t128 * t30 * 2.0) +
         -(t82 * t28 * t33 * 2.0);
  t194 = t193 * t193;
  t31 = in11val1 * t106;
  t197 = (-t39 + in13val1 * t63) + t31 * t192 * 17.074078592196649;
  t11 = in12val1 * t106;
  t198 = (t40 + -(in13val1 * t86)) + t11 * t192 * 17.074078592196649;
  out1_tmp = t41 * t57;
  b_out1_tmp = t41 * t88;
  out1[0] = (-t64 * t95 - out1_tmp * t198 * 9.81) - b_out1_tmp * t197 * 9.81;
  c_out1_tmp = t41 * t62;
  d_out1_tmp = t41 * t58;
  out1[1] = (t87 * t95 - d_out1_tmp * t197 * 9.81) + c_out1_tmp * t198 * 9.81;
  e_out1_tmp = t41 * t86;
  out1[2] = (t56 * t95 + t152_tmp * t197 * 9.81) - e_out1_tmp * t198 * 9.81;
  *out2 = std::atan2(in5val1 * in6val1 * 2.0 + in7val1 * in8val1 * 2.0, t86);
  t276 = t37 + t31 * t255 * 17.074078592196649;
  t199 = t32 * t197 * 19.62;
  t201 = t10 * t197 * 19.62;
  t202 = t188_tmp * t197 * 19.62;
  t208 = t32 * t198 * 19.62;
  t209 = t186_tmp * t198 * 19.62;
  t210 = t10 * t198 * 19.62;
  t28 = t41 * t75;
  t218 = t28 * t197 * 9.81;
  t34 = t41 * t80;
  t219 = t34 * t197 * 9.81;
  t30 = t41 * t81;
  t75 = t30 * t197 * 9.81;
  t33 = t41 * t82;
  t221 = t33 * t197 * 9.81;
  t82 = t28 * t198 * 9.81;
  t232 = t34 * t198 * 9.81;
  t233 = t30 * t198 * 9.81;
  t234 = t33 * t198 * 9.81;
  t244_tmp = t42 * t126;
  t81 = t35 + t31 * t257 * 17.074078592196649;
  t128 = t36 + t11 * t256 * 17.074078592196649;
  t80 = t37 + t11 * t257 * 17.074078592196649;
  t279 = t35 + -(t11 * t255 * 17.074078592196649);
  t73 = in12val1 * t41;
  t13 = in11val1 * t41;
  t325_tmp = t73 * t105;
  b_t325_tmp = t13 * t105;
  t325 = b_t325_tmp * t127 * t192 * 0.0160906034646792 +
         -(t325_tmp * t125 * t192 * 0.0160906034646792);
  t259_tmp = t41 * t126;
  t259 = t95 * t125 + t259_tmp * t197 * 9.81;
  t32 = t95 * t127 + t259_tmp * t198 * 9.81;
  t262 = e_out1_tmp * t126 * 9.81 + t244_tmp * t198 * 9.81;
  t280 = t36 + -(t31 * t258 * 17.074078592196649);
  t74 = t38 + -(t31 * t256 * 17.074078592196649);
  t282 = t38 + -(t11 * t258 * 17.074078592196649);
  t28 = in11val1 * t184;
  t34 = t41 * t56;
  t327 = (-(t63 * t95) + t34 * t197 * 9.81) + t28 * t254;
  t30 = t41 * t87;
  t329 = (t58 * t95 + t30 * t197 * 9.81) + t28 * t253;
  t11 = in12val1 * t184;
  t336 = ((t119 + in6val1 * t125 * 19.62) + t75) + t259_tmp * t276 * 9.81;
  t33 = t13 * t106 * t127;
  t31 = t73 * t106 * t125;
  t365 = ((c_out1_tmp * t197 * 9.81 + d_out1_tmp * t198 * 9.81) +
          t31 * t253 * 167.4967109894491) +
         -(t33 * t253 * 167.4967109894491);
  t367 = ((e_out1_tmp * t197 * 9.81 + t152_tmp * t198 * 9.81) +
          t33 * t254 * 167.4967109894491) +
         -(t31 * t254 * 167.4967109894491);
  t309_tmp = t41 * t127;
  t313_tmp = t41 * t125;
  t320 = t193 * t259 / 2.0;
  t10 = t193 * t32;
  t322 = t10 / 2.0;
  t326 = t309_tmp * t197 * 9.81 + -(t313_tmp * t198 * 9.81);
  t328 = ((t152_tmp * t127 * 9.81 + e_out1_tmp * t125 * 9.81) +
          -(t42 * t127 * t197 * 9.81)) +
         t42 * t125 * t198 * 9.81;
  t12 = t41 * t64;
  t331 = (t88 * t95 + -(t12 * t197 * 9.81)) + t28 * t252;
  t338 = ((-t117 + in8val1 * t125 * 19.62) + t218) + t259_tmp * t81 * 9.81;
  t344_tmp_tmp = t194 * t252;
  t344_tmp = t344_tmp_tmp * t32;
  t345_tmp_tmp = t194 * t253;
  t345_tmp = t345_tmp_tmp * t32;
  t346_tmp_tmp = t194 * t254;
  t346_tmp = t346_tmp_tmp * t32;
  t350_tmp_tmp = t194 * t255;
  t350_tmp = t350_tmp_tmp * t32;
  t351_tmp_tmp = t194 * t256;
  t351_tmp = t351_tmp_tmp * t32;
  t352_tmp_tmp = t194 * t257;
  t352_tmp = t352_tmp_tmp * t32;
  t353_tmp_tmp = t194 * t258;
  t353_tmp = t353_tmp_tmp * t32;
  t359_tmp = t193 * ((t86 * t95 + t34 * t198 * 9.81) + t11 * t254);
  t360_tmp = t193 * ((-(t62 * t95) + t30 * t198 * 9.81) + t11 * t253);
  t366 = ((out1_tmp * t197 * 9.81 + -(b_out1_tmp * t198 * 9.81)) +
          t33 * t252 * 167.4967109894491) +
         -(t31 * t252 * 167.4967109894491);
  t370 = ((t219 + -t234) + t309_tmp * t276 * 9.81) + t313_tmp * t279 * 9.81;
  t38 = t49 + t322;
  t28 = t193 * t326;
  t332 = t28 / 2.0;
  out3_tmp = in7val1 * t193;
  out3[0] = (-in6val1 * t38 + in8val1 * t320) - out3_tmp * t326 / 2.0;
  b_out3_tmp = in8val1 * t193;
  out3[1] = (in5val1 * t38 - out3_tmp * t259 / 2.0) - b_out3_tmp * t326 / 2.0;
  out3[2] = (in6val1 * t320 + in5val1 * t332) + in8val1 * t38;
  c_out3_tmp = in5val1 * t193;
  out3[3] = (in6val1 * t332 - in7val1 * t38) - c_out3_tmp * t259 / 2.0;
  *out4 = -in10val1 * in15val1;
  *out5 = -std::asin(in4val1 * t84);
  *out6 = std::atan2(in3val1, in2val1);
  out7[0] = in9val1 + t10;
  out7[1] = t28;
  out7[2] = -t193 * t259;
  t33 = t73 * t57;
  t31 = t13 * t88;
  j_out7[0] = t33 * t105 * t192 * -0.0160906034646792 -
              t31 * t105 * t192 * 0.0160906034646792;
  t30 = t13 * t58;
  t32 = t73 * t62;
  j_out7[1] = t30 * t105 * t192 * -0.0160906034646792 +
              t32 * t105 * t192 * 0.0160906034646792;
  t28 = t13 * t63;
  t34 = t73 * t86;
  j_out7[2] = t28 * t105 * t192 * 0.0160906034646792 -
              t34 * t105 * t192 * 0.0160906034646792;
  t33 *= t106;
  t31 *= t106;
  j_out7[3] = t33 * t252 * -167.4967109894491 - t31 * t252 * 167.4967109894491;
  t30 *= t106;
  t32 *= t106;
  j_out7[4] = t30 * t252 * -167.4967109894491 + t32 * t252 * 167.4967109894491;
  t28 *= t106;
  t34 *= t106;
  j_out7[5] = t28 * t252 * 167.4967109894491 - t34 * t252 * 167.4967109894491;
  j_out7[6] = t33 * t253 * -167.4967109894491 - t31 * t253 * 167.4967109894491;
  j_out7[7] = t30 * t253 * -167.4967109894491 + t32 * t253 * 167.4967109894491;
  j_out7[8] = t28 * t253 * 167.4967109894491 - t34 * t253 * 167.4967109894491;
  j_out7[9] = t33 * t254 * -167.4967109894491 - t31 * t254 * 167.4967109894491;
  j_out7[10] = t30 * t254 * -167.4967109894491 + t32 * t254 * 167.4967109894491;
  j_out7[11] = t28 * t254 * 167.4967109894491 - t34 * t254 * 167.4967109894491;
  t33 = (-t103 + -t199) + -t210;
  j_out7[12] = ((t33 - in6val1 * t64 * 19.62) + out1_tmp * t279 * 9.81) -
               b_out1_tmp * t276 * 9.81;
  t31 = (t100 + -t202) + t209;
  j_out7[13] = ((t31 + in6val1 * t87 * 19.62) - d_out1_tmp * t276 * 9.81) -
               c_out1_tmp * t279 * 9.81;
  t30 = (t101 + t201) + -t208;
  t32 = in6val1 * t56;
  j_out7[14] =
      ((t30 + t32 * 19.62) + t152_tmp * t276 * 9.81) + e_out1_tmp * t279 * 9.81;
  t28 = (in7val1 * t95 * 2.0 + -(t186_tmp * t197 * 19.62)) +
        -(t188_tmp * t198 * 19.62);
  j_out7[15] = ((t28 - in5val1 * t64 * 19.62) - out1_tmp * t128 * 9.81) +
               b_out1_tmp * t74 * 9.81;
  j_out7[16] = ((((-t101 - t201) + t208) + in5val1 * t87 * 19.62) +
                d_out1_tmp * t74 * 9.81) +
               c_out1_tmp * t128 * 9.81;
  t34 = in5val1 * t56;
  j_out7[17] =
      ((t31 + t34 * 19.62) - t152_tmp * t74 * 9.81) - e_out1_tmp * t128 * 9.81;
  j_out7[18] = ((t30 - in8val1 * t64 * 19.62) - out1_tmp * t80 * 9.81) -
               b_out1_tmp * t81 * 9.81;
  j_out7[19] = ((t28 + in8val1 * t87 * 19.62) - d_out1_tmp * t81 * 9.81) +
               c_out1_tmp * t80 * 9.81;
  t31 = in8val1 * t56;
  j_out7[20] =
      ((((t103 + t199) + t210) + t31 * 19.62) + t152_tmp * t81 * 9.81) -
      e_out1_tmp * t80 * 9.81;
  j_out7[21] = ((((-t100 + t202) - t209) - in7val1 * t64 * 19.62) +
                out1_tmp * t282 * 9.81) +
               b_out1_tmp * t280 * 9.81;
  j_out7[22] = ((t33 + in7val1 * t87 * 19.62) + d_out1_tmp * t280 * 9.81) -
               c_out1_tmp * t282 * 9.81;
  t33 = in7val1 * t56;
  j_out7[23] =
      ((t28 + t33 * 19.62) - t152_tmp * t280 * 9.81) + e_out1_tmp * t282 * 9.81;
  j_out7[24] = 0.0;
  j_out7[25] = 0.0;
  j_out7[26] = 0.0;
  j_out7[27] = t190_tmp * t57 * -9.81 + b_t190_tmp * t88 * 9.81;
  j_out7[28] = b_t190_tmp * t58 * 9.81 + t190_tmp * t62 * 9.81;
  j_out7[29] = b_t190_tmp * t63 * -9.81 - t190_tmp * t86 * 9.81;
  j_out7[30] = b_out1_tmp * t106 * t192 * -167.4967109894491;
  j_out7[31] = d_out1_tmp * t106 * t192 * -167.4967109894491;
  j_out7[32] = t152_tmp * t106 * t192 * 167.4967109894491;
  j_out7[33] = out1_tmp * t106 * t192 * -167.4967109894491;
  j_out7[34] = c_out1_tmp * t106 * t192 * 167.4967109894491;
  j_out7[35] = e_out1_tmp * t106 * t192 * -167.4967109894491;
  j_out7[36] = ((out1_tmp * t86 * 9.81 - t152_tmp * t88 * 9.81) +
                t42 * t57 * t198 * 9.81) +
               t42 * t88 * t197 * 9.81;
  j_out7[37] = ((d_out1_tmp * t63 * -9.81 - c_out1_tmp * t86 * 9.81) +
                t42 * t58 * t197 * 9.81) -
               t42 * t62 * t198 * 9.81;
  j_out7[38] = ((t41 * t94 * 9.81 + t41 * (t63 * t63) * 9.81) -
                t42 * t63 * t197 * 9.81) +
               t42 * t86 * t198 * 9.81;
  j_out7[39] = t191_tmp * t57 * -9.81 - b_t191_tmp * t88 * 9.81;
  j_out7[40] = b_t191_tmp * t58 * -9.81 + t191_tmp * t62 * 9.81;
  j_out7[41] = b_t191_tmp * t63 * 9.81 - t191_tmp * t86 * 9.81;
  j_out7[42] = 0.0;
  j_out7[43] = 0.0;
  j_out7[44] = 0.0;
  std::copy(&j_out7[0], &j_out7[45], &j_out1[0]);
  j_out2[0] = 0.0;
  j_out2[1] = 0.0;
  j_out2[2] = 0.0;
  j_out2[3] = 0.0;
  t28 = t94 * (1.0 / (t56 * t56 + t94));
  j_out2[4] = t28 * (in6val1 * t97 * 2.0 - t34 * t98 * 2.0);
  j_out2[5] = t28 * (in5val1 * t97 * 2.0 + t32 * t98 * 2.0);
  j_out2[6] = t28 * (in8val1 * t97 * 2.0 + t33 * t98 * 2.0);
  j_out2[7] = t28 * (in7val1 * t97 * 2.0 - t31 * t98 * 2.0);
  j_out2[8] = 0.0;
  j_out2[9] = 0.0;
  j_out2[10] = 0.0;
  j_out2[11] = 0.0;
  j_out2[12] = 0.0;
  j_out2[13] = 0.0;
  j_out2[14] = 0.0;
  t36 = t193 * ((t57 * t95 + -(t12 * t198 * 9.81)) + t11 * t252);
  t37 =
      t193 * (((t119 + in8val1 * t127 * 19.62) + t82) + t259_tmp * t80 * 9.81);
  t35 = t193 *
        (((-t118 + in5val1 * t127 * 19.62) + t232) + t259_tmp * t128 * 9.81);
  t75 = ((t75 + t82) + t313_tmp * t128 * 9.81) + t309_tmp * t74 * 9.81;
  t82 = ((t221 + t232) + t309_tmp * t81 * 9.81) + -(t313_tmp * t80 * 9.81);
  t81 = ((t116 + in5val1 * t125 * 19.62) + t219) + -(t259_tmp * t74 * 9.81);
  t80 = ((t118 + in7val1 * t125 * 19.62) + -t221) + -(t259_tmp * t280 * 9.81);
  t73 = t193 *
        (((t117 + in6val1 * t127 * 19.62) + t233) + -(t259_tmp * t279 * 9.81));
  t13 = t193 *
        (((t116 + in7val1 * t127 * 19.62) + -t234) + -(t259_tmp * t282 * 9.81));
  j_out3[0] = (out3_tmp * t325 * -0.5 -
               in6val1 * in12val1 * t41 * t105 * t126 * 0.0080453017323396) +
              in8val1 * in11val1 * t41 * t105 * t126 * 0.0080453017323396;
  j_out3[1] = (b_out3_tmp * t325 * -0.5 +
               in5val1 * in12val1 * t41 * t105 * t126 * 0.0080453017323396) -
              in7val1 * in11val1 * t41 * t105 * t126 * 0.0080453017323396;
  j_out3[2] = (c_out3_tmp * t325 / 2.0 +
               in6val1 * in11val1 * t41 * t105 * t126 * 0.0080453017323396) +
              in8val1 * in12val1 * t41 * t105 * t126 * 0.0080453017323396;
  t10 = in6val1 * t193;
  j_out3[3] = (t10 * t325 / 2.0 -
               in5val1 * in11val1 * t41 * t105 * t126 * 0.0080453017323396) -
              in7val1 * in12val1 * t41 * t105 * t126 * 0.0080453017323396;
  t11 = t344_tmp / 2.0 - t36 / 2.0;
  t30 = in7val1 * t194;
  t12 = t30 * t252;
  t33 = in8val1 * t194;
  t31 = t33 * t252;
  j_out3[4] =
      (((in6val1 * t11 + b_out3_tmp * t331 / 2.0) - out3_tmp * t366 / 2.0) -
       t31 * t259 / 2.0) +
      t12 * t326 / 2.0;
  j_out3[5] =
      (((-in5val1 * t11 - out3_tmp * t331 / 2.0) - b_out3_tmp * t366 / 2.0) +
       t12 * t259 / 2.0) +
      t31 * t326 / 2.0;
  t32 = in5val1 * t194;
  t12 = t32 * t252;
  t34 = in6val1 * t194;
  t31 = t34 * t252;
  j_out3[6] = (((-in8val1 * t11 + t10 * t331 / 2.0) + c_out3_tmp * t366 / 2.0) -
               t31 * t259 / 2.0) -
              t12 * t326 / 2.0;
  j_out3[7] = (((in7val1 * t11 - c_out3_tmp * t331 / 2.0) + t10 * t366 / 2.0) +
               t12 * t259 / 2.0) -
              t31 * t326 / 2.0;
  t11 = t345_tmp / 2.0 - t360_tmp / 2.0;
  t12 = t30 * t253;
  t31 = t33 * t253;
  j_out3[8] =
      (((in6val1 * t11 + b_out3_tmp * t329 / 2.0) + out3_tmp * t365 / 2.0) -
       t31 * t259 / 2.0) +
      t12 * t326 / 2.0;
  j_out3[9] =
      (((-in5val1 * t11 - out3_tmp * t329 / 2.0) + b_out3_tmp * t365 / 2.0) +
       t12 * t259 / 2.0) +
      t31 * t326 / 2.0;
  t12 = t32 * t253;
  t31 = t34 * t253;
  j_out3[10] =
      (((-in8val1 * t11 + t10 * t329 / 2.0) - c_out3_tmp * t365 / 2.0) -
       t31 * t259 / 2.0) -
      t12 * t326 / 2.0;
  j_out3[11] = (((in7val1 * t11 - c_out3_tmp * t329 / 2.0) - t10 * t365 / 2.0) +
                t12 * t259 / 2.0) -
               t31 * t326 / 2.0;
  t11 = t346_tmp / 2.0 - t359_tmp / 2.0;
  t12 = t30 * t254;
  t31 = t33 * t254;
  j_out3[12] =
      (((in6val1 * t11 + b_out3_tmp * t327 / 2.0) - out3_tmp * t367 / 2.0) -
       t31 * t259 / 2.0) +
      t12 * t326 / 2.0;
  j_out3[13] =
      (((-in5val1 * t11 - out3_tmp * t327 / 2.0) - b_out3_tmp * t367 / 2.0) +
       t12 * t259 / 2.0) +
      t31 * t326 / 2.0;
  t12 = t32 * t254;
  t31 = t34 * t254;
  j_out3[14] =
      (((-in8val1 * t11 + t10 * t327 / 2.0) + c_out3_tmp * t367 / 2.0) -
       t31 * t259 / 2.0) -
      t12 * t326 / 2.0;
  j_out3[15] = (((in7val1 * t11 - c_out3_tmp * t327 / 2.0) + t10 * t367 / 2.0) +
                t12 * t259 / 2.0) -
               t31 * t326 / 2.0;
  t11 = t350_tmp / 2.0 - t73 / 2.0;
  t12 = t30 * t255;
  t31 = t33 * t255;
  j_out3[16] =
      (((in6val1 * t11 + b_out3_tmp * t336 / 2.0) - out3_tmp * t370 / 2.0) -
       t31 * t259 / 2.0) +
      t12 * t326 / 2.0;
  j_out3[17] = ((((t38 - in5val1 * t11) - out3_tmp * t336 / 2.0) -
                 b_out3_tmp * t370 / 2.0) +
                t12 * t259 / 2.0) +
               t31 * t326 / 2.0;
  t12 = t32 * t255;
  t31 = t34 * t255;
  j_out3[18] =
      ((((t332 - in8val1 * t11) + t10 * t336 / 2.0) + c_out3_tmp * t370 / 2.0) -
       t31 * t259 / 2.0) -
      t12 * t326 / 2.0;
  j_out3[19] = ((((-t320 + in7val1 * t11) - c_out3_tmp * t336 / 2.0) +
                 t10 * t370 / 2.0) +
                t12 * t259 / 2.0) -
               t31 * t326 / 2.0;
  t11 = t351_tmp / 2.0 - t35 / 2.0;
  t12 = t30 * t256;
  t31 = t33 * t256;
  t28 = -t49 + -t322;
  j_out3[20] = ((((t28 + in6val1 * t11) + b_out3_tmp * t81 / 2.0) +
                 out3_tmp * t75 / 2.0) -
                t31 * t259 / 2.0) +
               t12 * t326 / 2.0;
  j_out3[21] =
      (((-in5val1 * t11 - out3_tmp * t81 / 2.0) + b_out3_tmp * t75 / 2.0) +
       t12 * t259 / 2.0) +
      t31 * t326 / 2.0;
  t12 = t32 * t256;
  t31 = t34 * t256;
  j_out3[22] =
      ((((t320 - in8val1 * t11) + t10 * t81 / 2.0) - c_out3_tmp * t75 / 2.0) -
       t31 * t259 / 2.0) -
      t12 * t326 / 2.0;
  j_out3[23] =
      ((((t332 + in7val1 * t11) - c_out3_tmp * t81 / 2.0) - t10 * t75 / 2.0) +
       t12 * t259 / 2.0) -
      t31 * t326 / 2.0;
  t11 = t352_tmp / 2.0 - t37 / 2.0;
  t12 = t30 * t257;
  t31 = t33 * t257;
  j_out3[24] = ((((-t332 + in6val1 * t11) + b_out3_tmp * t338 / 2.0) -
                 out3_tmp * t82 / 2.0) -
                t31 * t259 / 2.0) +
               t12 * t326 / 2.0;
  j_out3[25] = ((((-t320 - in5val1 * t11) - out3_tmp * t338 / 2.0) -
                 b_out3_tmp * t82 / 2.0) +
                t12 * t259 / 2.0) +
               t31 * t326 / 2.0;
  t12 = t32 * t257;
  t31 = t34 * t257;
  j_out3[26] = (((-in8val1 * t11 + t10 * t338 / 2.0) + c_out3_tmp * t82 / 2.0) -
                t31 * t259 / 2.0) -
               t12 * t326 / 2.0;
  j_out3[27] =
      ((((t28 + in7val1 * t11) - c_out3_tmp * t338 / 2.0) + t10 * t82 / 2.0) +
       t12 * t259 / 2.0) -
      t31 * t326 / 2.0;
  t11 = t353_tmp / 2.0 - t13 / 2.0;
  t12 = ((t218 - t233) - t309_tmp * t280 * 9.81) + t313_tmp * t282 * 9.81;
  t31 = t30 * t258;
  t28 = t33 * t258;
  j_out3[28] = ((((t320 + in6val1 * t11) - out3_tmp * t12 / 2.0) +
                 b_out3_tmp * t80 / 2.0) -
                t28 * t259 / 2.0) +
               t31 * t326 / 2.0;
  j_out3[29] = ((((-t332 - in5val1 * t11) - b_out3_tmp * t12 / 2.0) -
                 out3_tmp * t80 / 2.0) +
                t31 * t259 / 2.0) +
               t28 * t326 / 2.0;
  t31 = t32 * t258;
  t28 = t34 * t258;
  j_out3[30] =
      ((((t38 - in8val1 * t11) + c_out3_tmp * t12 / 2.0) + t10 * t80 / 2.0) -
       t28 * t259 / 2.0) -
      t31 * t326 / 2.0;
  j_out3[31] = (((in7val1 * t11 + t10 * t12 / 2.0) - c_out3_tmp * t80 / 2.0) +
                t31 * t259 / 2.0) -
               t28 * t326 / 2.0;
  j_out3[32] = in6val1 * -0.5;
  j_out3[33] = in5val1 / 2.0;
  j_out3[34] = in8val1 / 2.0;
  j_out3[35] = in7val1 * -0.5;
  j_out3[36] =
      (in7val1 * t190 * t193 / 2.0 - in6val1 * t6 * t41 * t126 * t193 * 4.905) -
      in8val1 * t5 * t41 * t126 * t193 * 4.905;
  j_out3[37] =
      (in8val1 * t190 * t193 / 2.0 + in5val1 * t6 * t41 * t126 * t193 * 4.905) +
      in7val1 * t5 * t41 * t126 * t193 * 4.905;
  j_out3[38] = (in5val1 * t190 * t193 * -0.5 -
                in6val1 * t5 * t41 * t126 * t193 * 4.905) +
               in8val1 * t6 * t41 * t126 * t193 * 4.905;
  j_out3[39] = (in6val1 * t190 * t193 * -0.5 +
                in5val1 * t5 * t41 * t126 * t193 * 4.905) -
               in7val1 * t6 * t41 * t126 * t193 * 4.905;
  j_out3[40] = t188 - t187_tmp * t127 * 83.748355494724549;
  j_out3[41] = -t187 - b_t188_tmp * t127 * 83.748355494724549;
  j_out3[42] = t186 + t185_tmp * t127 * 83.748355494724549;
  j_out3[43] = -t185 + b_t186_tmp * t127 * 83.748355494724549;
  j_out3[44] = -t186 + t187_tmp * t125 * 83.748355494724549;
  j_out3[45] = t185 + b_t188_tmp * t125 * 83.748355494724549;
  j_out3[46] = t188 - t185_tmp * t125 * 83.748355494724549;
  j_out3[47] = -t187 - b_t186_tmp * t125 * 83.748355494724549;
  t11 = t152_tmp * t126 * 9.81 - t244_tmp * t197 * 9.81;
  j_out3[48] =
      (t10 * t262 / 2.0 - out3_tmp * t328 / 2.0) + b_out3_tmp * t11 / 2.0;
  j_out3[49] = (c_out3_tmp * t262 * -0.5 - b_out3_tmp * t328 / 2.0) -
               out3_tmp * t11 / 2.0;
  j_out3[50] =
      (b_out3_tmp * t262 * -0.5 + c_out3_tmp * t328 / 2.0) + t10 * t11 / 2.0;
  j_out3[51] =
      (out3_tmp * t262 / 2.0 + t10 * t328 / 2.0) - c_out3_tmp * t11 / 2.0;
  j_out3[52] = (in7val1 * t191 * t193 / 2.0 -
                in6val1 * t39 * t41 * t126 * t193 * 4.905) +
               in8val1 * t40 * t41 * t126 * t193 * 4.905;
  j_out3[53] = (in8val1 * t191 * t193 / 2.0 +
                in5val1 * t39 * t41 * t126 * t193 * 4.905) -
               in7val1 * t40 * t41 * t126 * t193 * 4.905;
  j_out3[54] = (in5val1 * t191 * t193 * -0.5 +
                in6val1 * t40 * t41 * t126 * t193 * 4.905) +
               in8val1 * t39 * t41 * t126 * t193 * 4.905;
  j_out3[55] = (in6val1 * t191 * t193 * -0.5 -
                in5val1 * t40 * t41 * t126 * t193 * 4.905) -
               in7val1 * t39 * t41 * t126 * t193 * 4.905;
  j_out3[56] = 0.0;
  j_out3[57] = 0.0;
  j_out3[58] = 0.0;
  j_out3[59] = 0.0;
  std::memset(&j_out4[0], 0, 9U * sizeof(double));
  j_out4[9] = -in15val1;
  j_out4[10] = 0.0;
  j_out4[11] = 0.0;
  j_out4[12] = 0.0;
  j_out4[13] = 0.0;
  j_out4[14] = -in10val1;
  t74 = in2val1;
  if (in2val1 < 0.0) {
    t74 = -1.0;
  } else if (in2val1 > 0.0) {
    t74 = 1.0;
  }
  t128 = in3val1;
  if (in3val1 < 0.0) {
    t128 = -1.0;
  } else if (in3val1 > 0.0) {
    t128 = 1.0;
  }
  t28 = in4val1;
  if (in4val1 < 0.0) {
    t28 = -1.0;
  } else if (in4val1 > 0.0) {
    t28 = 1.0;
  }
  j_out5[0] = 0.0;
  j_out5[1] = in4val1 * t2 * t85 * t108 * t74;
  j_out5[2] = in4val1 * t3 * t85 * t108 * t128;
  j_out5[3] = -t108 * (t84 - in4val1 * t4 * t85 * t28);
  std::memset(&j_out5[4], 0, 11U * sizeof(double));
  j_out6[0] = 0.0;
  j_out6[1] = -in3val1 * t61;
  j_out6[2] = in2val1 * t61;
  std::memset(&j_out6[3], 0, 12U * sizeof(double));
  j_out7[0] = t325_tmp * t126 * 0.0160906034646792;
  j_out7[1] = t193 * t325;
  j_out7[2] = b_t325_tmp * t126 * -0.0160906034646792;
  j_out7[3] = t36 - t344_tmp;
  j_out7[4] = t193 * t366 - t344_tmp_tmp * t326;
  j_out7[5] = -t193 * t331 + t344_tmp_tmp * t259;
  j_out7[6] = t360_tmp - t345_tmp;
  j_out7[7] = -t193 * t365 - t345_tmp_tmp * t326;
  j_out7[8] = -t193 * t329 + t345_tmp_tmp * t259;
  j_out7[9] = t359_tmp - t346_tmp;
  j_out7[10] = t193 * t367 - t346_tmp_tmp * t326;
  j_out7[11] = -t193 * t327 + t346_tmp_tmp * t259;
  j_out7[12] = t73 - t350_tmp;
  j_out7[13] = t193 * t370 - t350_tmp_tmp * t326;
  j_out7[14] = -t193 * t336 + t350_tmp_tmp * t259;
  j_out7[15] = t35 - t351_tmp;
  j_out7[16] = -t193 * t75 - t351_tmp_tmp * t326;
  j_out7[17] = -t193 * t81 + t351_tmp_tmp * t259;
  j_out7[18] = t37 - t352_tmp;
  j_out7[19] = t193 * t82 - t352_tmp_tmp * t326;
  j_out7[20] = -t193 * t338 + t352_tmp_tmp * t259;
  j_out7[21] = t13 - t353_tmp;
  j_out7[22] = t193 * t12 - t353_tmp_tmp * t326;
  j_out7[23] = -t193 * t80 + t353_tmp_tmp * t259;
  j_out7[24] = 1.0;
  j_out7[25] = 0.0;
  j_out7[26] = 0.0;
  j_out7[27] = t190_tmp * t126 * t193 * 9.81;
  j_out7[28] = -t190 * t193;
  j_out7[29] = b_t190_tmp * t126 * t193 * 9.81;
  j_out7[30] = 0.0;
  j_out7[31] = t184_tmp * t127 * 167.4967109894491;
  j_out7[32] = -t184;
  j_out7[33] = t184;
  j_out7[34] = t184_tmp * t125 * -167.4967109894491;
  j_out7[35] = 0.0;
  j_out7[36] = -t193 * t262;
  j_out7[37] = t193 * t328;
  j_out7[38] = -t193 * t11;
  j_out7[39] = t191_tmp * t126 * t193 * 9.81;
  j_out7[40] = -t191 * t193;
  j_out7[41] = b_t191_tmp * t126 * t193 * -9.81;
  j_out7[42] = 0.0;
  j_out7[43] = 0.0;
  j_out7[44] = 0.0;
}

void mb_OptimalManeuver(const double states[14], const double controls[3],
                        double statesdot[14], double outputs[16],
                        double j_statesdot[238], double j_outputs[272])
{
  static const signed char iv[196]{
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};
  static const signed char a[9]{1, 0, 0, 0, 1, 0, 0, 0, 1};
  static const signed char b_a[6]{-10, 0, 0, 10, 0, 0};
  static const signed char c_a[6]{0, -10, 0, 0, 10, 0};
  static const signed char d_a[6]{0, 0, -10, 0, 0, 10};
  double tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[255];
  double tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[119];
  double b_j_edot_P[68];
  double j_edot_P[60];
  double b_j_Omega_P[51];
  double j_vdot_PE[51];
  double b_j_vdot_PE[45];
  double j_Omega_P[45];
  double j_CD[17];
  double j_CL[17];
  double j_T[17];
  double j_alpha[17];
  double j_Wdot_P[15];
  double j_gamma_P[15];
  double j_phi_P[15];
  double j_psi_P[15];
  double c_states[7];
  double b_states[5];
  double edot_P[4];
  double Omega_P[3];
  double vdot_PE[3];
  double CD;
  double CL;
  double T;
  double ab_states_tmp;
  double alpha;
  double alpha_tmp;
  double alpha_tmp_tmp;
  double b_alpha_tmp;
  double b_alpha_tmp_tmp;
  double b_states_tmp;
  double bb_states_tmp;
  double c_alpha_tmp;
  double c_alpha_tmp_tmp;
  double c_states_tmp;
  double cb_states_tmp;
  double d_alpha_tmp;
  double d_alpha_tmp_tmp;
  double d_states_tmp;
  double db_states_tmp;
  double e_alpha_tmp;
  double e_alpha_tmp_tmp;
  double e_states_tmp;
  double eb_states_tmp;
  double f_alpha_tmp;
  double f_alpha_tmp_tmp;
  double f_states_tmp;
  double fb_states_tmp;
  double g_alpha_tmp;
  double g_alpha_tmp_tmp;
  double g_states_tmp;
  double gb_states_tmp;
  double h_alpha_tmp;
  double h_alpha_tmp_tmp;
  double h_states_tmp;
  double hb_states_tmp;
  double i_alpha_tmp_tmp;
  double i_states_tmp;
  double ib_states_tmp;
  double j_alpha_tmp_tmp;
  double jb_states_tmp;
  double k_states_tmp;
  double kb_states_tmp;
  double l_states_tmp;
  double lb_states_tmp;
  double m_states_tmp;
  double mb_states_tmp;
  double n_states_tmp;
  double nb_states_tmp;
  double o_states_tmp;
  double ob_states_tmp;
  double p_states_tmp;
  double pb_states_tmp;
  double q_states_tmp;
  double r_states_tmp;
  double s_states_tmp;
  double states_tmp;
  double t15_tmp;
  double t35;
  double t36;
  double t39;
  double t8_tmp;
  double t_states_tmp;
  double u_states_tmp;
  double v_states_tmp;
  double w_states_tmp;
  double x_states_tmp;
  double y_states_tmp;
  int i;
  int i1;
  int j_states_tmp;
  signed char j_states[238];
  signed char tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[102];
  signed char tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[85];
  signed char j_controls[51];
  signed char j_rdot_PE[51];
  signed char i2;
  signed char i3;
  signed char i4;
  // mb_OptimalManeuver
  //  File automatically generated by FALCON.m
  // === Extract Data From Input ==============================================
  // === Jacobians and Hessians ===============================================
  std::memset(&j_states[0], 0, 238U * sizeof(signed char));
  for (i = 0; i < 14; i++) {
    for (i1 = 0; i1 < 14; i1++) {
      j_states_tmp = i1 + 14 * i;
      j_states[j_states_tmp] = iv[j_states_tmp];
    }
  }
  for (i = 0; i < 51; i++) {
    j_controls[i] = 0;
  }
  for (i = 0; i < 3; i++) {
    j_states_tmp = 3 * (i + 14);
    j_controls[j_states_tmp] = a[3 * i];
    j_controls[j_states_tmp + 1] = a[3 * i + 1];
    j_controls[j_states_tmp + 2] = a[3 * i + 2];
  }
  // === Write Constants ======================================================
  // === Subsystem sysPositionPropagation =====================================
  //  Defined at main (main.m:57)
  //  Call sys_70f1ab52b326654d8650384e6c66097e_jac
  // SYS_70F1AB52B326654D8650384E6C66097E_JAC
  //     [OUT1,J_OUT1,H_OUT1] =
  //     SYS_70F1AB52B326654D8650384E6C66097E_JAC(IN1VAL1,IN2VAL1,IN3VAL1) This
  //     function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:24:45
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[3 1]}
  // Constant outputs : false
  //  Hessian Jacobian for sys_70f1ab52b326654d8650384e6c66097e_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_70f1ab52b326654d8650384e6c66097e_jac
  for (i = 0; i < 17; i++) {
    j_vdot_PE[3 * i] = j_states[14 * i + 3];
    j_vdot_PE[3 * i + 1] = j_states[14 * i + 4];
    j_vdot_PE[3 * i + 2] = j_states[14 * i + 5];
  }
  for (i = 0; i < 3; i++) {
    i2 = a[i];
    i3 = a[i + 3];
    i4 = a[i + 6];
    for (i1 = 0; i1 < 17; i1++) {
      j_rdot_PE[i + 3 * i1] = static_cast<signed char>(
          (i2 * static_cast<int>(j_vdot_PE[3 * i1]) +
           i3 * static_cast<int>(j_vdot_PE[3 * i1 + 1])) +
          i4 * static_cast<int>(j_vdot_PE[3 * i1 + 2]));
    }
  }
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double t18;
  double t19;
  double t20;
  double t21;
  double t22;
  double t25;
  double t26;
  double t27;
  double t28;
  double t29;
  double t30;
  double t31;
  double t32;
  double t33;
  double t34;
  double t37;
  double t41;
  double t43;
  double t45;
  double t47;
  double t49;
  double t5;
  double t51;
  double t53;
  double t55;
  double t6;
  double t7;
  double t8;
  double t9;
  // === Subsystem sysThrustCalc ==============================================
  //  Defined at main (main.m:69)
  //  Call sys_b653047fe439321d85b8e4c67c1d239e_jac
  // SYS_B653047FE439321D85B8E4C67C1D239E_JAC
  //     [OUT1,OUT2,J_OUT1,J_OUT2,H_OUT1,H_OUT2] =
  //     SYS_B653047FE439321D85B8E4C67C1D239E_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:24:46
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1]}
  // Constant outputs : [false true]
  t6 = states[2] * 2.2557695644629531E-5;
  t8_tmp =
      (states[3] * states[3] + states[4] * states[4]) + states[5] * states[5];
  t8 = std::sqrt(t8_tmp);
  t11 = std::pow(t6 + 1.0, 4.2586437952291609);
  t13 = 1.0 / std::sqrt(states[2] * 2.6117 + 115778.67);
  t10 = 1.0 / t8;
  t15_tmp = t8 * t13 * 0.35 + 1.0;
  T = states[12] * t11 * t15_tmp * 88980.389911198668;
  //  Hessian Jacobian for sys_b653047fe439321d85b8e4c67c1d239e_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_b653047fe439321d85b8e4c67c1d239e_jac
  b_states[0] = states[12] * std::pow(t6 + 1.0, 3.2586437952291609) * t15_tmp *
                    8.54791811574036 -
                states[12] * t8 * t11 * std::pow(t13, 3.0) * 40668.264757938567;
  b_states[1] = states[3] * states[12] * t10 * t11 * t13 * 31143.136468919529;
  b_states[2] = states[4] * states[12] * t10 * t11 * t13 * 31143.136468919529;
  b_states[3] = states[5] * states[12] * t10 * t11 * t13 * 31143.136468919529;
  b_states[4] = t11 * t15_tmp * 88980.389911198668;
  // === Subsystem sysAeroCalc ================================================
  //  Defined at main (main.m:62)
  //  Call sys_ae427af578a359dbc76e23f19598e1e5_jac
  // SYS_AE427AF578A359DBC76E23F19598E1E5_JAC
  //     [OUT1,OUT2,OUT3,OUT4,J_OUT1,J_OUT2,J_OUT3,J_OUT4,H_OUT1,H_OUT2,H_OUT3,H_OUT4]
  //     =
  //     SYS_AE427AF578A359DBC76E23F19598E1E5_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1,IN7VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     21-Jan-2023 15:02:43
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1], [1 1], [1 1]}
  // Constant outputs : [false false false false]
  t5 = states[13] * states[13];
  t6 = std::pow(states[13], 3.0);
  t8 = std::pow(states[13], 5.0);
  t10 = std::pow(states[13], 7.0);
  t11 = states[10] * states[10];
  t12 = std::pow(states[10], 3.0);
  t14 = std::pow(states[10], 5.0);
  t16 = std::pow(states[10], 7.0);
  t7 = t5 * t5;
  t9 = std::pow(t5, 3.0);
  t13 = t11 * t11;
  t15 = std::pow(t11, 3.0);
  t18 = std::pow(t6, 3.0);
  t19 = std::pow(t5, 5.0);
  t21 = std::pow(t12, 3.0);
  t22 = std::pow(t11, 5.0);
  t36 = states[2] * 2.2557695644629531E-5 + 1.0;
  t17 = t7 * t7;
  t20 = t13 * t13;
  t25 = 1.0 / t8_tmp;
  t37 = 1.0 / std::pow(t36, 29.810506566604129);
  t39 = 1.0 / std::pow(t36, 4.2586437952291609);
  t26 = t25 * t25;
  t27 = std::pow(t25, 3.0);
  t29 = std::pow(t25, 5.0);
  t31 = std::pow(t25, 7.0);
  t35 = std::pow(t25, 11.0);
  t41 = t39 * t39;
  t43 = std::pow(t39, 3.0);
  t47 = std::pow(t39, 5.0);
  t28 = t26 * t26;
  t30 = std::pow(t26, 3.0);
  t33 = std::pow(t27, 3.0);
  t34 = std::pow(t26, 5.0);
  t45 = t41 * t41;
  t49 = std::pow(t41, 3.0);
  t53 = std::pow(t43, 3.0);
  t55 = std::pow(t41, 5.0);
  t32 = t28 * t28;
  t51 = t45 * t45;
  alpha_tmp_tmp = states[10] * states[13] * t25;
  t15_tmp = alpha_tmp_tmp * t39;
  b_alpha_tmp_tmp = t5 * t11 * t26;
  alpha_tmp = b_alpha_tmp_tmp * t41;
  c_alpha_tmp_tmp = t6 * t12 * t27;
  b_alpha_tmp = c_alpha_tmp_tmp * t43;
  d_alpha_tmp_tmp = t7 * t13 * t28;
  c_alpha_tmp = d_alpha_tmp_tmp * t45;
  e_alpha_tmp_tmp = t10 * t16 * t31;
  d_alpha_tmp = e_alpha_tmp_tmp * t37;
  f_alpha_tmp_tmp = t8 * t14 * t29;
  e_alpha_tmp = f_alpha_tmp_tmp * t47;
  g_alpha_tmp_tmp = t9 * t15 * t30;
  t8_tmp = g_alpha_tmp_tmp * t49;
  h_alpha_tmp_tmp = t17 * t20 * t32;
  f_alpha_tmp = h_alpha_tmp_tmp * t51;
  i_alpha_tmp_tmp = t18 * t21 * t33;
  g_alpha_tmp = i_alpha_tmp_tmp * t53;
  j_alpha_tmp_tmp = t19 * t22 * t34;
  h_alpha_tmp = j_alpha_tmp_tmp * t55;
  alpha =
      ((((t15_tmp * 0.014345619572951881 + alpha_tmp * 9.260716983790664E-5) +
         b_alpha_tmp * -1.5347140792949311E-5) +
        (c_alpha_tmp * 3.7537393593212812E-6 +
         d_alpha_tmp * 6.8569306861973568E-10)) +
       ((((e_alpha_tmp * 1.0170526449357679E-7 +
           t8_tmp * -3.5462236672989408E-8) +
          f_alpha_tmp * 9.3388466194067771E-11) +
         g_alpha_tmp * -4.71752534419257E-12) +
        h_alpha_tmp * 6.3607941133378246E-14)) +
      -0.027385456961207789;
  CL = t15_tmp * 0.05856831421972189;
  CD = ((((t15_tmp * -0.0028263146667897089 +
           alpha_tmp * 0.00025138714998666339) +
          b_alpha_tmp * -3.6783410110134163E-5) +
         (c_alpha_tmp * 1.05807779465885E-5 +
          d_alpha_tmp * 1.8045782307252909E-9)) +
        ((((e_alpha_tmp * 2.8999706422462358E-7 +
            t8_tmp * -9.5414298683523566E-8) +
           f_alpha_tmp * 2.5073064367535648E-10) +
          g_alpha_tmp * -1.26219015064533E-11) +
         h_alpha_tmp * 1.7014739458514929E-13)) +
       0.027612476522558611;
  //  Hessian Jacobian for sys_ae427af578a359dbc76e23f19598e1e5_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_ae427af578a359dbc76e23f19598e1e5_jac
  states_tmp = alpha_tmp_tmp * (1.0 / std::pow(t36, 5.2586437952291609));
  b_states_tmp = b_alpha_tmp_tmp * (1.0 / std::pow(t36, 9.5172875904583218));
  c_states_tmp = c_alpha_tmp_tmp * (1.0 / std::pow(t36, 13.77593138568748));
  d_states_tmp = d_alpha_tmp_tmp * (1.0 / std::pow(t36, 18.03457518091664));
  e_states_tmp = e_alpha_tmp_tmp * (1.0 / std::pow(t36, 30.810506566604129));
  f_states_tmp = f_alpha_tmp_tmp * (1.0 / std::pow(t36, 22.293218976145809));
  g_states_tmp = g_alpha_tmp_tmp * (1.0 / std::pow(t36, 26.551862771374971));
  h_states_tmp = h_alpha_tmp_tmp * (1.0 / std::pow(t36, 35.069150361833287));
  i_states_tmp = i_alpha_tmp_tmp * (1.0 / std::pow(t36, 39.327794157062449));
  k_states_tmp = j_alpha_tmp_tmp * (1.0 / std::pow(t36, 43.586437952291611));
  c_states[0] = ((((states_tmp * -1.3781146784312059E-6 -
                    b_states_tmp * 1.77926508412672E-8) +
                   c_states_tmp * 4.4229780159355821E-9) +
                  (d_states_tmp * -1.4424147479386E-9 +
                   e_states_tmp * -4.61098647270391E-13)) +
                 ((f_states_tmp * -4.8851678088758041E-11 +
                   g_states_tmp * 2.04401191487857E-11) +
                  h_states_tmp * -7.17710464319744E-14)) +
                (i_states_tmp * 4.0787097417980116E-15 +
                 k_states_tmp * -6.1105089881216707E-17);
  l_states_tmp = states[3] * states[13] * states[10] * t26 * t39;
  m_states_tmp = states[3] * t5 * t11 * t27 * t41;
  n_states_tmp = states[3] * t6 * t12 * t28 * t43;
  o_states_tmp = states[3] * t7 * t13 * t29 * t45;
  p_states_tmp = states[3] * t10 * t16 * t32 * t37;
  q_states_tmp = states[3] * t8 * t14 * t30 * t47;
  r_states_tmp = states[3] * t9 * t15 * t31 * t49;
  s_states_tmp = states[3] * t17 * t20 * t33 * t51;
  t_states_tmp = states[3] * t18 * t21 * t34 * t53;
  u_states_tmp = states[3] * t19 * t22 * t35 * t55;
  c_states[1] = (((l_states_tmp * -0.028691239145903762 -
                   m_states_tmp * 0.00037042867935162651) +
                  n_states_tmp * 9.2082844757695887E-5) +
                 (o_states_tmp * -3.0029914874570249E-5 +
                  p_states_tmp * -9.5997029606763E-9)) +
                ((((q_states_tmp * -1.017052644935768E-6 +
                    r_states_tmp * 4.2554684007587289E-7) +
                   s_states_tmp * -1.4942154591050839E-9) +
                  t_states_tmp * 8.4915456195466259E-11) +
                 u_states_tmp * -1.272158822667565E-12);
  v_states_tmp = states[4] * states[13] * states[10] * t26 * t39;
  w_states_tmp = states[4] * t5 * t11 * t27 * t41;
  x_states_tmp = states[4] * t6 * t12 * t28 * t43;
  y_states_tmp = states[4] * t7 * t13 * t29 * t45;
  ab_states_tmp = states[4] * t10 * t16 * t32 * t37;
  bb_states_tmp = states[4] * t8 * t14 * t30 * t47;
  cb_states_tmp = states[4] * t9 * t15 * t31 * t49;
  db_states_tmp = states[4] * t17 * t20 * t33 * t51;
  eb_states_tmp = states[4] * t18 * t21 * t34 * t53;
  fb_states_tmp = states[4] * t19 * t22 * t35 * t55;
  c_states[2] = (((v_states_tmp * -0.028691239145903762 -
                   w_states_tmp * 0.00037042867935162651) +
                  x_states_tmp * 9.2082844757695887E-5) +
                 (y_states_tmp * -3.0029914874570249E-5 +
                  ab_states_tmp * -9.5997029606763E-9)) +
                ((((bb_states_tmp * -1.017052644935768E-6 +
                    cb_states_tmp * 4.2554684007587289E-7) +
                   db_states_tmp * -1.4942154591050839E-9) +
                  eb_states_tmp * 8.4915456195466259E-11) +
                 fb_states_tmp * -1.272158822667565E-12);
  gb_states_tmp = states[5] * states[13] * states[10] * t26 * t39;
  hb_states_tmp = states[5] * t5 * t11 * t27 * t41;
  ib_states_tmp = states[5] * t6 * t12 * t28 * t43;
  jb_states_tmp = states[5] * t7 * t13 * t29 * t45;
  kb_states_tmp = states[5] * t10 * t16 * t32 * t37;
  lb_states_tmp = states[5] * t8 * t14 * t30 * t47;
  mb_states_tmp = states[5] * t9 * t15 * t31 * t49;
  nb_states_tmp = states[5] * t17 * t20 * t33 * t51;
  ob_states_tmp = states[5] * t18 * t21 * t34 * t53;
  c_alpha_tmp_tmp = states[5] * t19 * t22 * t35 * t55;
  c_states[3] = (((gb_states_tmp * -0.028691239145903762 -
                   hb_states_tmp * 0.00037042867935162651) +
                  ib_states_tmp * 9.2082844757695887E-5) +
                 (jb_states_tmp * -3.0029914874570249E-5 +
                  kb_states_tmp * -9.5997029606763E-9)) +
                ((((lb_states_tmp * -1.017052644935768E-6 +
                    mb_states_tmp * 4.2554684007587289E-7) +
                   nb_states_tmp * -1.4942154591050839E-9) +
                  ob_states_tmp * 8.4915456195466259E-11) +
                 c_alpha_tmp_tmp * -1.272158822667565E-12);
  d_alpha_tmp_tmp = states[10] * t25 * t39;
  e_alpha_tmp_tmp = states[13] * t11 * t26 * t41;
  f_alpha_tmp_tmp = t5 * t12 * t27 * t43;
  g_alpha_tmp_tmp = t6 * t13 * t28 * t45;
  h_alpha_tmp_tmp = t9 * t16 * t31 * t37;
  i_alpha_tmp_tmp = t7 * t14 * t29 * t47;
  j_alpha_tmp_tmp = t8 * t15 * t30 * t49;
  t35 = t10 * t20 * t32 * t51;
  pb_states_tmp = t17 * t21 * t33 * t53;
  b_alpha_tmp_tmp = t18 * t22 * t34 * t55;
  c_states[4] = (((d_alpha_tmp_tmp * 0.014345619572951881 +
                   e_alpha_tmp_tmp * 0.00018521433967581331) +
                  f_alpha_tmp_tmp * -4.6041422378847943E-5) +
                 (g_alpha_tmp_tmp * 1.501495743728512E-5 +
                  h_alpha_tmp_tmp * 4.79985148033815E-9)) +
                ((((i_alpha_tmp_tmp * 5.0852632246788423E-7 +
                    j_alpha_tmp_tmp * -2.127734200379365E-7) +
                   t35 * 7.4710772955254217E-10) +
                  pb_states_tmp * -4.2457728097733129E-11) +
                 b_alpha_tmp_tmp * 6.3607941133378249E-13);
  c_states[5] = 0.0;
  alpha_tmp_tmp = states[13] * t25 * t39;
  h_alpha_tmp = states[10] * t5 * t26 * t41;
  g_alpha_tmp = t6 * t11 * t27 * t43;
  e_alpha_tmp = t7 * t12 * t28 * t45;
  d_alpha_tmp = t10 * t15 * t31 * t37;
  c_alpha_tmp = t8 * t13 * t29 * t47;
  b_alpha_tmp = t9 * t14 * t30 * t49;
  alpha_tmp = t16 * t17 * t32 * t51;
  t8_tmp = t18 * t20 * t33 * t53;
  t15_tmp = t19 * t21 * t34 * t55;
  c_states[6] = (((alpha_tmp_tmp * 0.014345619572951881 +
                   h_alpha_tmp * 0.00018521433967581331) +
                  g_alpha_tmp * -4.6041422378847943E-5) +
                 (e_alpha_tmp * 1.501495743728512E-5 +
                  d_alpha_tmp * 4.79985148033815E-9)) +
                ((((c_alpha_tmp * 5.0852632246788423E-7 +
                    b_alpha_tmp * -2.127734200379365E-7) +
                   alpha_tmp * 7.4710772955254217E-10) +
                  t8_tmp * -4.2457728097733129E-11) +
                 t15_tmp * 6.3607941133378249E-13);
  for (i = 0; i < 17; i++) {
    signed char i5;
    i2 = j_states[14 * i + 2];
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i] = i2;
    i3 = j_states[14 * i + 3];
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i + 1] = i3;
    i4 = j_states[14 * i + 4];
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i + 2] = i4;
    i5 = j_states[14 * i + 5];
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i + 3] = i5;
    tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[5 * i + 4] =
        j_states[14 * i + 12];
    f_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 5; i1++) {
      f_alpha_tmp +=
          b_states[i1] *
          static_cast<double>(
              tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac[i1 + 5 * i]);
    }
    j_T[i] = f_alpha_tmp;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i] = i2;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 1] = i3;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 2] = i4;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 3] = i5;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 4] =
        j_states[14 * i + 13];
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 5] =
        f_alpha_tmp;
    tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[7 * i + 6] =
        j_states[14 * i + 10];
    f_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      f_alpha_tmp +=
          c_states[i1] *
          tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[i1 + 7 * i];
    }
    j_alpha[i] = f_alpha_tmp;
  }
  c_states[0] = states_tmp * -5.6263762681503669E-6;
  c_states[1] = l_states_tmp * -0.11713662843944379;
  c_states[2] = v_states_tmp * -0.11713662843944379;
  c_states[3] = gb_states_tmp * -0.11713662843944379;
  c_states[4] = d_alpha_tmp_tmp * 0.05856831421972189;
  c_states[5] = 0.0;
  c_states[6] = alpha_tmp_tmp * 0.05856831421972189;
  for (i = 0; i < 17; i++) {
    f_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      f_alpha_tmp +=
          c_states[i1] *
          tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[i1 + 7 * i];
    }
    j_CL[i] = f_alpha_tmp;
  }
  c_states[0] = ((((states_tmp * 2.7151045713718412E-7 -
                    b_states_tmp * 4.8299108951530809E-8) +
                   c_states_tmp * 1.0600815908524741E-8) +
                  (d_states_tmp * -4.0657778001886287E-9 +
                   e_states_tmp * -1.213500061705419E-12)) +
                 ((f_states_tmp * -1.392931162288153E-10 +
                   g_states_tmp * 5.4995956729218991E-11) +
                  h_states_tmp * -1.9269189657476059E-13)) +
                (i_states_tmp * 1.0912728364620441E-14 +
                 k_states_tmp * -1.634524188949835E-16);
  c_states[1] = ((((l_states_tmp * 0.0056526293335794186 -
                    m_states_tmp * 0.0010055485999466529) +
                   n_states_tmp * 0.000220700460660805) +
                  (o_states_tmp * -8.4646223572708024E-5 +
                   p_states_tmp * -2.5264095230154079E-8)) +
                 (((q_states_tmp * -2.8999706422462361E-6 +
                    r_states_tmp * 1.144971584202283E-6) +
                   s_states_tmp * -4.0116902988057029E-9) +
                  t_states_tmp * 2.2719422711615941E-10)) +
                u_states_tmp * -3.402947891702986E-12;
  c_states[2] = ((((v_states_tmp * 0.0056526293335794186 -
                    w_states_tmp * 0.0010055485999466529) +
                   x_states_tmp * 0.000220700460660805) +
                  (y_states_tmp * -8.4646223572708024E-5 +
                   ab_states_tmp * -2.5264095230154079E-8)) +
                 (((bb_states_tmp * -2.8999706422462361E-6 +
                    cb_states_tmp * 1.144971584202283E-6) +
                   db_states_tmp * -4.0116902988057029E-9) +
                  eb_states_tmp * 2.2719422711615941E-10)) +
                fb_states_tmp * -3.402947891702986E-12;
  c_states[3] = ((((gb_states_tmp * 0.0056526293335794186 -
                    hb_states_tmp * 0.0010055485999466529) +
                   ib_states_tmp * 0.000220700460660805) +
                  (jb_states_tmp * -8.4646223572708024E-5 +
                   kb_states_tmp * -2.5264095230154079E-8)) +
                 (((lb_states_tmp * -2.8999706422462361E-6 +
                    mb_states_tmp * 1.144971584202283E-6) +
                   nb_states_tmp * -4.0116902988057029E-9) +
                  ob_states_tmp * 2.2719422711615941E-10)) +
                c_alpha_tmp_tmp * -3.402947891702986E-12;
  c_states[4] = (((d_alpha_tmp_tmp * -0.0028263146667897089 +
                   e_alpha_tmp_tmp * 0.00050277429997332666) +
                  f_alpha_tmp_tmp * -0.0001103502303304025) +
                 (g_alpha_tmp_tmp * 4.2323111786354012E-5 +
                  h_alpha_tmp_tmp * 1.263204761507704E-8)) +
                ((((i_alpha_tmp_tmp * 1.449985321123118E-6 +
                    j_alpha_tmp_tmp * -5.7248579210114139E-7) +
                   t35 * 2.0058451494028519E-9) +
                  pb_states_tmp * -1.135971135580797E-10) +
                 b_alpha_tmp_tmp * 1.701473945851493E-12);
  c_states[5] = 0.0;
  c_states[6] = (((alpha_tmp_tmp * -0.0028263146667897089 +
                   h_alpha_tmp * 0.00050277429997332666) +
                  g_alpha_tmp * -0.0001103502303304025) +
                 (e_alpha_tmp * 4.2323111786354012E-5 +
                  d_alpha_tmp * 1.263204761507704E-8)) +
                ((((c_alpha_tmp * 1.449985321123118E-6 +
                    b_alpha_tmp * -5.7248579210114139E-7) +
                   alpha_tmp * 2.0058451494028519E-9) +
                  t8_tmp * -1.135971135580797E-10) +
                 t15_tmp * 1.701473945851493E-12);
  // === Subsystem sysTranslationPropagation ==================================
  //  Defined at main (main.m:76)
  //  Call sys_ea955d09cf58549297c8a3c36e04d747_jac
  sys_ea955d09cf58549297c8a3c36e04d747_jac(
      states[2], states[3], states[4], states[5], states[6], states[7],
      states[8], states[9], states[11], T, CD, CL, states[10], alpha, 0.0002138,
      vdot_PE, &t15_tmp, edot_P, &c_alpha_tmp, &d_alpha_tmp, &e_alpha_tmp,
      Omega_P, b_j_vdot_PE, j_phi_P, j_edot_P, j_Wdot_P, j_gamma_P, j_psi_P,
      j_Omega_P);
  //  Hessian Jacobian for sys_ea955d09cf58549297c8a3c36e04d747_jac
  for (i = 0; i < 17; i++) {
    f_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      f_alpha_tmp +=
          c_states[i1] *
          tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[i1 + 7 * i];
    }
    j_CD[i] = f_alpha_tmp;
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i] =
        j_states[14 * i + 2];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 1] =
        j_states[14 * i + 3];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 2] =
        j_states[14 * i + 4];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 3] =
        j_states[14 * i + 5];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 4] =
        j_states[14 * i + 6];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 5] =
        j_states[14 * i + 7];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 6] =
        j_states[14 * i + 8];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 7] =
        j_states[14 * i + 9];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 8] =
        j_states[14 * i + 11];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 9] = j_T[i];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 10] =
        f_alpha_tmp;
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 11] = j_CL[i];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 12] =
        j_states[14 * i + 10];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 13] =
        j_alpha[i];
    tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[15 * i + 14] = 0.0;
  }
  //  Calculation of Jacobian with respect to function global input for
  //  sys_ea955d09cf58549297c8a3c36e04d747_jac
  for (i = 0; i < 3; i++) {
    for (i1 = 0; i1 < 17; i1++) {
      f_alpha_tmp = 0.0;
      for (j_states_tmp = 0; j_states_tmp < 15; j_states_tmp++) {
        f_alpha_tmp +=
            b_j_vdot_PE[i + 3 * j_states_tmp] *
            tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[j_states_tmp +
                                                                 15 * i1];
      }
      j_vdot_PE[i + 3 * i1] = f_alpha_tmp;
    }
  }
  for (i = 0; i < 4; i++) {
    for (i1 = 0; i1 < 17; i1++) {
      f_alpha_tmp = 0.0;
      for (j_states_tmp = 0; j_states_tmp < 15; j_states_tmp++) {
        f_alpha_tmp +=
            j_edot_P[i + (j_states_tmp << 2)] *
            tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[j_states_tmp +
                                                                 15 * i1];
      }
      b_j_edot_P[i + (i1 << 2)] = f_alpha_tmp;
    }
  }
  for (i = 0; i < 3; i++) {
    for (i1 = 0; i1 < 17; i1++) {
      f_alpha_tmp = 0.0;
      for (j_states_tmp = 0; j_states_tmp < 15; j_states_tmp++) {
        f_alpha_tmp +=
            j_Omega_P[i + 3 * j_states_tmp] *
            tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[j_states_tmp +
                                                                 15 * i1];
      }
      b_j_Omega_P[i + 3 * i1] = f_alpha_tmp;
    }
  }
  // === Subsystem sysCommandsDelay ===========================================
  //  Defined at main (main.m:81)
  //  Call sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  // SYS_2E11DA000B4BBADF99D6DD9A0951F18B_JAC
  //     [OUT1,OUT2,OUT3,J_OUT1,J_OUT2,J_OUT3,H_OUT1,H_OUT2,H_OUT3] =
  //     SYS_2E11DA000B4BBADF99D6DD9A0951F18B_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:25:05
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1], [1 1]}
  // Constant outputs : [false false false]
  //  Hessian Jacobian for sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  // === Split Variable rdot_PE ===============================================
  // === Split Variable vdot_PE ===============================================
  // === Split Variable edot_P ================================================
  // === Split Variable Omega_P ===============================================
  //  Combine Variables to statesdot
  statesdot[0] = states[3];
  statesdot[1] = states[4];
  statesdot[2] = states[5];
  statesdot[3] = vdot_PE[0];
  statesdot[4] = vdot_PE[1];
  statesdot[5] = vdot_PE[2];
  statesdot[6] = edot_P[0];
  statesdot[7] = edot_P[1];
  statesdot[8] = edot_P[2];
  statesdot[9] = edot_P[3];
  statesdot[10] = c_alpha_tmp;
  statesdot[11] = states[11] * -10.0 + controls[0] * 10.0;
  statesdot[12] = states[12] * -10.0 + controls[1] * 10.0;
  statesdot[13] = states[13] * -10.0 + controls[2] * 10.0;
  //  Combine Variables to outputs
  outputs[0] = t15_tmp;
  outputs[1] = d_alpha_tmp;
  outputs[2] = e_alpha_tmp;
  outputs[3] = alpha;
  outputs[4] = CL;
  outputs[5] = CD;
  outputs[6] = T;
  outputs[7] = 0.0002138;
  outputs[8] = 1.2252256827617729 / t39;
  outputs[9] = Omega_P[0];
  outputs[10] = Omega_P[1];
  outputs[11] = Omega_P[2];
  outputs[12] = edot_P[0];
  outputs[13] = edot_P[1];
  outputs[14] = edot_P[2];
  outputs[15] = edot_P[3];
  c_states[0] = std::pow(t36, 3.2586437952291609) * 0.000117701538732318;
  c_states[1] = 0.0;
  c_states[2] = 0.0;
  c_states[3] = 0.0;
  c_states[4] = 0.0;
  c_states[5] = 0.0;
  c_states[6] = 0.0;
  for (i = 0; i < 17; i++) {
    int b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    int c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    int d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    int tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    j_states_tmp = 14 * i + 11;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i] =
        j_states[j_states_tmp];
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 14 * i + 12;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 1] =
        j_states[tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 14 * i + 13;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 2] =
        j_states[b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 3] =
        j_controls[3 * i];
    c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 3 * i + 1;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 4] =
        j_controls[c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 3 * i + 2;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 5] =
        j_controls[d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    f_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 15; i1++) {
      f_alpha_tmp +=
          j_Wdot_P[i1] *
          tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[i1 + 15 * i];
    }
    t15_tmp = 0.0;
    c_alpha_tmp = 0.0;
    d_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 6; i1++) {
      i2 = tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[i1 + 6 * i];
      t15_tmp += static_cast<double>(b_a[i1] * i2);
      c_alpha_tmp += static_cast<double>(c_a[i1] * i2);
      d_alpha_tmp += static_cast<double>(d_a[i1] * i2);
    }
    j_statesdot[14 * i] = j_rdot_PE[3 * i];
    j_statesdot[14 * i + 1] =
        j_rdot_PE[c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    j_statesdot[14 * i + 2] =
        j_rdot_PE[d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    j_statesdot[14 * i + 3] = j_vdot_PE[3 * i];
    j_statesdot[14 * i + 4] =
        j_vdot_PE[c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    j_statesdot[14 * i + 5] =
        j_vdot_PE[d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    i1 = i << 2;
    e_alpha_tmp = b_j_edot_P[i1];
    j_statesdot[14 * i + 6] = e_alpha_tmp;
    t8_tmp = b_j_edot_P[i1 + 1];
    j_statesdot[14 * i + 7] = t8_tmp;
    alpha_tmp = b_j_edot_P[i1 + 2];
    j_statesdot[14 * i + 8] = alpha_tmp;
    b_alpha_tmp = b_j_edot_P[i1 + 3];
    j_statesdot[14 * i + 9] = b_alpha_tmp;
    j_statesdot[14 * i + 10] = f_alpha_tmp;
    j_statesdot[j_states_tmp] = t15_tmp;
    j_statesdot[tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp] =
        c_alpha_tmp;
    j_statesdot[b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp] =
        d_alpha_tmp;
    f_alpha_tmp = 0.0;
    t15_tmp = 0.0;
    c_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 15; i1++) {
      d_alpha_tmp =
          tmp_j_input_sys_ea955d09cf58549297c8a3c36e04d747_jac[i1 + 15 * i];
      f_alpha_tmp += j_phi_P[i1] * d_alpha_tmp;
      t15_tmp += j_gamma_P[i1] * d_alpha_tmp;
      c_alpha_tmp += j_psi_P[i1] * d_alpha_tmp;
    }
    d_alpha_tmp = 0.0;
    for (i1 = 0; i1 < 7; i1++) {
      d_alpha_tmp +=
          c_states[i1] *
          tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac[i1 + 7 * i];
    }
    j_states_tmp = i << 4;
    j_outputs[j_states_tmp] = f_alpha_tmp;
    j_outputs[j_states_tmp + 1] = t15_tmp;
    j_outputs[j_states_tmp + 2] = c_alpha_tmp;
    j_outputs[j_states_tmp + 3] = j_alpha[i];
    j_outputs[j_states_tmp + 4] = j_CL[i];
    j_outputs[j_states_tmp + 5] = j_CD[i];
    j_outputs[j_states_tmp + 6] = j_T[i];
    j_outputs[j_states_tmp + 7] = 0.0;
    j_outputs[j_states_tmp + 8] = d_alpha_tmp;
    j_outputs[j_states_tmp + 9] = b_j_Omega_P[3 * i];
    j_outputs[j_states_tmp + 10] =
        b_j_Omega_P[c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    j_outputs[j_states_tmp + 11] =
        b_j_Omega_P[d_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    j_outputs[j_states_tmp + 12] = e_alpha_tmp;
    j_outputs[j_states_tmp + 13] = t8_tmp;
    j_outputs[j_states_tmp + 14] = alpha_tmp;
    j_outputs[j_states_tmp + 15] = b_alpha_tmp;
  }
}

void mb_OptimalManeuver_initialize()
{
}

void mb_OptimalManeuver_terminate()
{
  // (no terminate code required)
}

// End of code generation (mb_OptimalManeuver.cpp)
