//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// mb_OptimalManeuver.cpp
//
// Code generation for function 'mb_OptimalManeuver'
//

// Include files
#include "mb_OptimalManeuver.h"
#include <cmath>
#include <cstring>

// Function Definitions
void mb_OptimalManeuver(const double states[12], const double controls[3],
                        double statesdot[12], double outputs[10],
                        double j_statesdot[180], double j_outputs[150])
{
  static const signed char iv[144]{
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};
  static const signed char b_a[13]{0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0};
  static const signed char iv1[9]{1, 0, 0, 0, 1, 0, 0, 0, 1};
  static const signed char c_a[6]{-10, 0, 0, 10, 0, 0};
  static const signed char d_a[6]{0, -10, 0, 0, 10, 0};
  static const signed char e_a[6]{0, 0, -10, 0, 0, 10};
  double tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[195];
  double tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[60];
  double b_states[52];
  double j_rdot_E[45];
  double a[15];
  double c_CD[15];
  double dv4[15];
  double j_CD[15];
  double j_CL[15];
  double j_T[15];
  double j_alpha[15];
  double b_CD[13];
  double dv[13];
  double dv1[5];
  double dv2[5];
  double dv3[5];
  double CD;
  double CL;
  double alpha;
  double alpha_tmp;
  double alpha_tmp_tmp;
  double alpha_tmp_tmp_tmp;
  double b_alpha_tmp;
  double b_alpha_tmp_tmp;
  double b_alpha_tmp_tmp_tmp;
  double b_states_idx_0_tmp;
  double b_states_idx_1_tmp;
  double b_t14_tmp;
  double b_t21_tmp;
  double b_t22_tmp;
  double b_t30;
  double b_t31;
  double b_t33;
  double b_t34;
  double b_t35;
  double b_t36;
  double c_alpha_tmp;
  double c_alpha_tmp_tmp;
  double c_alpha_tmp_tmp_tmp;
  double c_states_idx_0_tmp;
  double c_states_idx_1_tmp;
  double c_t14_tmp;
  double c_t21_tmp;
  double c_t22_tmp;
  double d_alpha_tmp_tmp;
  double d_alpha_tmp_tmp_tmp;
  double d_states_idx_0_tmp;
  double d_states_idx_1_tmp;
  double e_alpha_tmp_tmp;
  double e_alpha_tmp_tmp_tmp;
  double e_states_idx_0_tmp;
  double e_states_idx_1_tmp;
  double f_alpha_tmp_tmp;
  double f_alpha_tmp_tmp_tmp;
  double f_states_idx_0_tmp;
  double g_alpha_tmp_tmp;
  double g_alpha_tmp_tmp_tmp;
  double g_states_idx_0_tmp;
  double h_alpha_tmp_tmp;
  double h_states_idx_0_tmp;
  double i_alpha_tmp_tmp;
  double i_states_idx_0_tmp;
  double j_alpha_tmp_tmp;
  double j_states_idx_0_tmp;
  double states_idx_0;
  double states_idx_0_tmp;
  double states_idx_1_tmp;
  double t10;
  double t10_tmp;
  double t11;
  double t11_tmp;
  double t12;
  double t13;
  double t14;
  double t14_tmp;
  double t15;
  double t16;
  double t18;
  double t2;
  double t21_tmp;
  double t22_tmp;
  double t23;
  double t25;
  double t29_tmp;
  double t2_tmp;
  double t3;
  double t30;
  double t31;
  double t32;
  double t33;
  double t34;
  double t35;
  double t36;
  double t37;
  double t3_tmp;
  double t41;
  double t42;
  double t44;
  double t45;
  double t46;
  double t48;
  double t4_tmp;
  double t5;
  double t51;
  double t52;
  double t53;
  double t54;
  double t5_tmp;
  double t6;
  double t6_tmp;
  double t7;
  double t7_tmp;
  double t8;
  double t8_tmp;
  int b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
  int i;
  int i1;
  int j_states_tmp;
  int tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
  int tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac_tmp;
  signed char j_states[180];
  signed char tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[90];
  signed char tmp_j_input_sys_9ad26b3366587637edbbdc61512a5773_jac[75];
  signed char j_controls[45];
  signed char i2;
  // mb_OptimalManeuver
  //  File automatically generated by FALCON.m
  // === Extract Data From Input ==============================================
  // === Jacobians and Hessians ===============================================
  std::memset(&j_states[0], 0, 180U * sizeof(signed char));
  for (i = 0; i < 12; i++) {
    for (i1 = 0; i1 < 12; i1++) {
      j_states_tmp = i1 + 12 * i;
      j_states[j_states_tmp] = iv[j_states_tmp];
    }
  }
  for (i = 0; i < 45; i++) {
    j_controls[i] = 0;
  }
  for (i = 0; i < 3; i++) {
    j_states_tmp = 3 * (i + 12);
    j_controls[j_states_tmp] = iv1[3 * i];
    j_controls[j_states_tmp + 1] = iv1[3 * i + 1];
    j_controls[j_states_tmp + 2] = iv1[3 * i + 2];
  }
  // === Write Constants ======================================================
  // === Subsystem sysPositionPropagation =====================================
  //  Defined at main (main.m:49)
  //  Call sys_9ad26b3366587637edbbdc61512a5773_jac
  // SYS_9AD26B3366587637EDBBDC61512A5773_JAC
  //     [OUT1,OUT2,OUT3,OUT4,J_OUT1,J_OUT2,J_OUT3,J_OUT4,H_OUT1,H_OUT2,H_OUT3,H_OUT4]
  //     =
  //     SYS_9AD26B3366587637EDBBDC61512A5773_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     26-Jan-2023 16:21:15
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[3 1], [1 1], [1 1], [1 1]}
  // Constant outputs : [false false false false]
  t2_tmp = states[4] * states[4];
  t3_tmp = states[5] * states[5];
  t4_tmp = states[6] * states[6];
  t5_tmp = states[7] * states[7];
  t6_tmp = states[3] * states[4];
  t6 = t6_tmp * 2.0;
  t7_tmp = states[3] * states[5];
  t7 = t7_tmp * 2.0;
  t8_tmp = states[3] * states[6];
  t8 = t8_tmp * 2.0;
  t10_tmp = states[3] * states[7];
  t10 = t10_tmp * 2.0;
  t11_tmp = states[4] * states[6];
  t11 = t11_tmp * 2.0;
  t14_tmp = states[5] * states[7];
  t14 = t14_tmp * 2.0;
  t21_tmp = states[4] * states[5];
  b_t21_tmp = states[6] * states[7];
  c_t21_tmp = t21_tmp * 2.0 + b_t21_tmp * 2.0;
  t22_tmp = states[4] * states[7];
  b_t22_tmp = states[5] * states[6];
  c_t22_tmp = t22_tmp * 2.0 + b_t22_tmp * 2.0;
  t23 = t11 + -t14;
  t29_tmp = ((t2_tmp + t5_tmp) + -t3_tmp) + -t4_tmp;
  t30 = ((t2_tmp + t3_tmp) + -t4_tmp) + -t5_tmp;
  t31 = t29_tmp * t29_tmp;
  t32 = t30 * t30;
  t34 = 1.0 / t29_tmp;
  t35 = 1.0 / t30;
  t36 = 1.0 / t31;
  t37 = 1.0 / t32;
  t33 = 1.0 / std::sqrt(-(t23 * t23) + 1.0);
  //  Hessian Jacobian for sys_9ad26b3366587637edbbdc61512a5773_jac
  for (i = 0; i < 15; i++) {
    tmp_j_input_sys_9ad26b3366587637edbbdc61512a5773_jac[5 * i] =
        j_states[12 * i + 3];
    tmp_j_input_sys_9ad26b3366587637edbbdc61512a5773_jac[5 * i + 1] =
        j_states[12 * i + 4];
    tmp_j_input_sys_9ad26b3366587637edbbdc61512a5773_jac[5 * i + 2] =
        j_states[12 * i + 5];
    tmp_j_input_sys_9ad26b3366587637edbbdc61512a5773_jac[5 * i + 3] =
        j_states[12 * i + 6];
    tmp_j_input_sys_9ad26b3366587637edbbdc61512a5773_jac[5 * i + 4] =
        j_states[12 * i + 7];
  }
  //  Calculation of Jacobian with respect to function global input for
  //  sys_9ad26b3366587637edbbdc61512a5773_jac
  j_alpha[0] = t30;
  j_alpha[1] = c_t22_tmp;
  j_alpha[2] = -t11 + t14;
  j_alpha[3] = t6;
  j_alpha[4] = t10;
  j_alpha[5] = -t8;
  j_alpha[6] = t7;
  j_alpha[7] = t8;
  j_alpha[8] = t10;
  j_alpha[9] = -t8;
  j_alpha[10] = t7;
  j_alpha[11] = -t6;
  j_alpha[12] = -t10;
  j_alpha[13] = t6;
  j_alpha[14] = t7;
  for (i = 0; i < 3; i++) {
    for (i1 = 0; i1 < 15; i1++) {
      alpha_tmp_tmp = 0.0;
      for (j_states_tmp = 0; j_states_tmp < 5; j_states_tmp++) {
        alpha_tmp_tmp +=
            j_alpha[i + 3 * j_states_tmp] *
            static_cast<double>(
                tmp_j_input_sys_9ad26b3366587637edbbdc61512a5773_jac
                    [j_states_tmp + 5 * i1]);
      }
      j_rdot_E[i + 3 * i1] = alpha_tmp_tmp;
    }
  }
  double b_t23;
  double b_t32;
  double h_alpha_tmp_tmp_tmp;
  double i_alpha_tmp_tmp_tmp;
  double j_alpha_tmp_tmp_tmp;
  double t20;
  double t21;
  double t22;
  double t24;
  double t26;
  double t28;
  double t38;
  double t4;
  double t50;
  double t56;
  double t58;
  double t60;
  double t9;
  // === Subsystem sysAeroCalc ================================================
  //  Defined at main (main.m:54)
  //  Call sys_abd1dd15ef234fda3363cddb8e59878b_jac
  // SYS_ABD1DD15EF234FDA3363CDDB8E59878B_JAC
  //     [OUT1,OUT2,OUT3,J_OUT1,J_OUT2,J_OUT3,H_OUT1,H_OUT2,H_OUT3] =
  //     SYS_ABD1DD15EF234FDA3363CDDB8E59878B_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     26-Jan-2023 16:21:16
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1], [1 1]}
  // Constant outputs : [false false false]
  t2 = states[11] * states[11];
  t3 = std::pow(states[11], 3.0);
  t5 = std::pow(states[11], 5.0);
  t7 = std::pow(states[11], 7.0);
  t8 = states[8] * states[8];
  t9 = std::pow(states[8], 3.0);
  t11 = std::pow(states[8], 5.0);
  t13 = std::pow(states[8], 7.0);
  b_t14_tmp = states[3] * states[3];
  c_t14_tmp = 1.0 / b_t14_tmp;
  t15 = 1.0 / std::pow(states[3], 3.0);
  t4 = t2 * t2;
  t6 = std::pow(t2, 3.0);
  t10 = t8 * t8;
  t12 = std::pow(t8, 3.0);
  t16 = c_t14_tmp * c_t14_tmp;
  t18 = std::pow(c_t14_tmp, 3.0);
  t21 = std::pow(t3, 3.0);
  t22 = std::pow(t2, 5.0);
  t24 = std::pow(t9, 3.0);
  t25 = std::pow(t8, 5.0);
  t28 = std::pow(c_t14_tmp, 5.0);
  b_t32 = std::pow(c_t14_tmp, 7.0);
  t41 = states[2] * 2.2557695644629531E-5 + 1.0;
  t20 = t4 * t4;
  b_t23 = t10 * t10;
  t26 = t16 * t16;
  b_t30 = std::pow(t16, 3.0);
  b_t36 = std::pow(t18, 3.0);
  t38 = std::pow(t16, 5.0);
  t42 = 1.0 / std::pow(t41, 29.810506566604129);
  t44 = 1.0 / std::pow(t41, 4.2586437952291609);
  b_t34 = t26 * t26;
  t46 = t44 * t44;
  t48 = std::pow(t44, 3.0);
  t52 = std::pow(t44, 5.0);
  t50 = t46 * t46;
  t54 = std::pow(t46, 3.0);
  t58 = std::pow(t48, 3.0);
  t60 = std::pow(t46, 5.0);
  t56 = t50 * t50;
  alpha_tmp_tmp_tmp = states[8] * states[11];
  alpha_tmp_tmp = alpha_tmp_tmp_tmp * c_t14_tmp;
  t14 = alpha_tmp_tmp * t44;
  b_alpha_tmp_tmp_tmp = t2 * t8;
  b_alpha_tmp_tmp = b_alpha_tmp_tmp_tmp * t16;
  t53 = b_alpha_tmp_tmp * t46;
  c_alpha_tmp_tmp_tmp = t3 * t9;
  c_alpha_tmp_tmp = c_alpha_tmp_tmp_tmp * t18;
  b_t35 = c_alpha_tmp_tmp * t48;
  d_alpha_tmp_tmp_tmp = t4 * t10;
  d_alpha_tmp_tmp = d_alpha_tmp_tmp_tmp * t26;
  alpha_tmp = d_alpha_tmp_tmp * t50;
  e_alpha_tmp_tmp_tmp = t7 * t13;
  e_alpha_tmp_tmp = e_alpha_tmp_tmp_tmp * b_t32;
  t51 = e_alpha_tmp_tmp * t42;
  f_alpha_tmp_tmp_tmp = t5 * t11;
  f_alpha_tmp_tmp = f_alpha_tmp_tmp_tmp * t28;
  b_t33 = f_alpha_tmp_tmp * t52;
  g_alpha_tmp_tmp_tmp = t6 * t12;
  g_alpha_tmp_tmp = g_alpha_tmp_tmp_tmp * b_t30;
  t45 = g_alpha_tmp_tmp * t54;
  h_alpha_tmp_tmp_tmp = t20 * b_t23;
  h_alpha_tmp_tmp = h_alpha_tmp_tmp_tmp * b_t34;
  b_t31 = h_alpha_tmp_tmp * t56;
  i_alpha_tmp_tmp_tmp = t21 * t24;
  i_alpha_tmp_tmp = i_alpha_tmp_tmp_tmp * b_t36;
  b_alpha_tmp = i_alpha_tmp_tmp * t58;
  j_alpha_tmp_tmp_tmp = t22 * t25;
  j_alpha_tmp_tmp = j_alpha_tmp_tmp_tmp * t38;
  c_alpha_tmp = j_alpha_tmp_tmp * t60;
  alpha =
      ((((t14 * 0.014345619572951881 + t53 * 9.260716983790664E-5) +
         b_t35 * -1.5347140792949311E-5) +
        (alpha_tmp * 3.7537393593212812E-6 + t51 * 6.8569306861973568E-10)) +
       ((((b_t33 * 1.0170526449357679E-7 + t45 * -3.5462236672989408E-8) +
          b_t31 * 9.3388466194067771E-11) +
         b_alpha_tmp * -4.71752534419257E-12) +
        c_alpha_tmp * 6.3607941133378246E-14)) +
      -0.027385456961207789;
  CL = t14 * 0.05856831421972189;
  CD = ((((t14 * -0.0028263146667897089 + t53 * 0.00025138714998666339) +
          b_t35 * -3.6783410110134163E-5) +
         (alpha_tmp * 1.05807779465885E-5 + t51 * 1.8045782307252909E-9)) +
        ((((b_t33 * 2.8999706422462358E-7 + t45 * -9.5414298683523566E-8) +
           b_t31 * 2.5073064367535648E-10) +
          b_alpha_tmp * -1.26219015064533E-11) +
         c_alpha_tmp * 1.7014739458514929E-13)) +
       0.027612476522558611;
  //  Hessian Jacobian for sys_abd1dd15ef234fda3363cddb8e59878b_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_abd1dd15ef234fda3363cddb8e59878b_jac
  states_idx_0_tmp = alpha_tmp_tmp * (1.0 / std::pow(t41, 5.2586437952291609));
  b_states_idx_0_tmp =
      b_alpha_tmp_tmp * (1.0 / std::pow(t41, 9.5172875904583218));
  c_states_idx_0_tmp =
      c_alpha_tmp_tmp * (1.0 / std::pow(t41, 13.77593138568748));
  d_states_idx_0_tmp =
      d_alpha_tmp_tmp * (1.0 / std::pow(t41, 18.03457518091664));
  e_states_idx_0_tmp =
      e_alpha_tmp_tmp * (1.0 / std::pow(t41, 30.810506566604129));
  f_states_idx_0_tmp =
      f_alpha_tmp_tmp * (1.0 / std::pow(t41, 22.293218976145809));
  g_states_idx_0_tmp =
      g_alpha_tmp_tmp * (1.0 / std::pow(t41, 26.551862771374971));
  h_states_idx_0_tmp =
      h_alpha_tmp_tmp * (1.0 / std::pow(t41, 35.069150361833287));
  i_states_idx_0_tmp =
      i_alpha_tmp_tmp * (1.0 / std::pow(t41, 39.327794157062449));
  j_states_idx_0_tmp =
      j_alpha_tmp_tmp * (1.0 / std::pow(t41, 43.586437952291611));
  states_idx_0 = ((((states_idx_0_tmp * -1.3781146784312059E-6 -
                     b_states_idx_0_tmp * 1.77926508412672E-8) +
                    c_states_idx_0_tmp * 4.4229780159355821E-9) +
                   (d_states_idx_0_tmp * -1.4424147479386E-9 +
                    e_states_idx_0_tmp * -4.61098647270391E-13)) +
                  ((f_states_idx_0_tmp * -4.8851678088758041E-11 +
                    g_states_idx_0_tmp * 2.04401191487857E-11) +
                   h_states_idx_0_tmp * -7.17710464319744E-14)) +
                 (i_states_idx_0_tmp * 4.0787097417980116E-15 +
                  j_states_idx_0_tmp * -6.1105089881216707E-17);
  states_idx_1_tmp = alpha_tmp_tmp_tmp * t15 * t44;
  b_states_idx_1_tmp =
      b_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 5.0)) * t46;
  c_states_idx_1_tmp =
      c_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 7.0)) * t48;
  d_states_idx_1_tmp = d_alpha_tmp_tmp_tmp * std::pow(t15, 3.0) * t50;
  e_states_idx_1_tmp = e_alpha_tmp_tmp_tmp * std::pow(t15, 5.0) * t42;
  e_alpha_tmp_tmp_tmp =
      f_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 11.0)) * t52;
  d_alpha_tmp_tmp_tmp =
      g_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 13.0)) * t54;
  c_alpha_tmp_tmp_tmp =
      h_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 17.0)) * t56;
  b_alpha_tmp_tmp_tmp =
      i_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 19.0)) * t58;
  alpha_tmp = j_alpha_tmp_tmp_tmp * std::pow(t15, 7.0) * t60;
  f_alpha_tmp_tmp_tmp = (((states_idx_1_tmp * -0.028691239145903762 -
                           b_states_idx_1_tmp * 0.00037042867935162651) +
                          c_states_idx_1_tmp * 9.2082844757695887E-5) +
                         (d_states_idx_1_tmp * -3.0029914874570249E-5 +
                          e_states_idx_1_tmp * -9.5997029606763E-9)) +
                        ((((e_alpha_tmp_tmp_tmp * -1.017052644935768E-6 +
                            d_alpha_tmp_tmp_tmp * 4.2554684007587289E-7) +
                           c_alpha_tmp_tmp_tmp * -1.4942154591050839E-9) +
                          b_alpha_tmp_tmp_tmp * 8.4915456195466259E-11) +
                         alpha_tmp * -1.272158822667565E-12);
  b_alpha_tmp = states[8] * c_t14_tmp * t44;
  c_alpha_tmp = states[11] * t8 * t16 * t46;
  alpha_tmp_tmp = t2 * t9 * t18 * t48;
  b_alpha_tmp_tmp = t3 * t10 * t26 * t50;
  g_alpha_tmp_tmp = t6 * t13 * b_t32 * t42;
  h_alpha_tmp_tmp = t4 * t11 * t28 * t52;
  i_alpha_tmp_tmp = t5 * t12 * b_t30 * t54;
  t41 = t7 * b_t23 * b_t34 * t56;
  j_alpha_tmp_tmp = t20 * t24 * b_t36 * t58;
  b_t31 = t21 * t25 * t38 * t60;
  g_alpha_tmp_tmp_tmp = (((b_alpha_tmp * 0.014345619572951881 +
                           c_alpha_tmp * 0.00018521433967581331) +
                          alpha_tmp_tmp * -4.6041422378847943E-5) +
                         (b_alpha_tmp_tmp * 1.501495743728512E-5 +
                          g_alpha_tmp_tmp * 4.79985148033815E-9)) +
                        ((((h_alpha_tmp_tmp * 5.0852632246788423E-7 +
                            i_alpha_tmp_tmp * -2.127734200379365E-7) +
                           t41 * 7.4710772955254217E-10) +
                          j_alpha_tmp_tmp * -4.2457728097733129E-11) +
                         b_t31 * 6.3607941133378249E-13);
  t45 = states[11] * c_t14_tmp * t44;
  b_t33 = states[8] * t2 * t16 * t46;
  t51 = t3 * t8 * t18 * t48;
  b_t35 = t4 * t9 * t26 * t50;
  f_alpha_tmp_tmp = t7 * t12 * b_t32 * t42;
  t53 = t5 * t10 * t28 * t52;
  e_alpha_tmp_tmp = t6 * t11 * b_t30 * t54;
  d_alpha_tmp_tmp = t13 * t20 * b_t34 * t56;
  c_alpha_tmp_tmp = t21 * b_t23 * b_t36 * t58;
  t14 = t22 * t24 * t38 * t60;
  alpha_tmp_tmp_tmp =
      (((t45 * 0.014345619572951881 + b_t33 * 0.00018521433967581331) +
        t51 * -4.6041422378847943E-5) +
       (b_t35 * 1.501495743728512E-5 + f_alpha_tmp_tmp * 4.79985148033815E-9)) +
      ((((t53 * 5.0852632246788423E-7 +
          e_alpha_tmp_tmp * -2.127734200379365E-7) +
         d_alpha_tmp_tmp * 7.4710772955254217E-10) +
        c_alpha_tmp_tmp * -4.2457728097733129E-11) +
       t14 * 6.3607941133378249E-13);
  for (i = 0; i < 15; i++) {
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac_tmp = i << 2;
    i1 = j_states[12 * i + 2];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac
        [tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac_tmp] = i1;
    j_states_tmp = j_states[12 * i + 3];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac
        [tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac_tmp + 1] =
            j_states_tmp;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp =
        j_states[12 * i + 11];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac
        [tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac_tmp + 2] =
            tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp =
        j_states[12 * i + 8];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac
        [tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac_tmp + 3] =
            b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    j_alpha[i] =
        ((states_idx_0 * static_cast<double>(i1) +
          f_alpha_tmp_tmp_tmp * static_cast<double>(j_states_tmp)) +
         g_alpha_tmp_tmp_tmp *
             static_cast<double>(
                 tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp)) +
        alpha_tmp_tmp_tmp *
            static_cast<double>(
                b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp);
  }
  states_idx_0 = states_idx_0_tmp * -5.6263762681503669E-6;
  f_alpha_tmp_tmp_tmp = states_idx_1_tmp * -0.11713662843944379;
  g_alpha_tmp_tmp_tmp = b_alpha_tmp * 0.05856831421972189;
  alpha_tmp_tmp_tmp = t45 * 0.05856831421972189;
  for (i = 0; i < 15; i++) {
    i1 = i << 2;
    j_CL[i] =
        ((states_idx_0 *
              tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1] +
          f_alpha_tmp_tmp_tmp *
              tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 + 1]) +
         g_alpha_tmp_tmp_tmp *
             tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 + 2]) +
        alpha_tmp_tmp_tmp *
            tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 + 3];
  }
  states_idx_0 = ((((states_idx_0_tmp * 2.7151045713718412E-7 -
                     b_states_idx_0_tmp * 4.8299108951530809E-8) +
                    c_states_idx_0_tmp * 1.0600815908524741E-8) +
                   (d_states_idx_0_tmp * -4.0657778001886287E-9 +
                    e_states_idx_0_tmp * -1.213500061705419E-12)) +
                  ((f_states_idx_0_tmp * -1.392931162288153E-10 +
                    g_states_idx_0_tmp * 5.4995956729218991E-11) +
                   h_states_idx_0_tmp * -1.9269189657476059E-13)) +
                 (i_states_idx_0_tmp * 1.0912728364620441E-14 +
                  j_states_idx_0_tmp * -1.634524188949835E-16);
  f_alpha_tmp_tmp_tmp = (((states_idx_1_tmp * 0.0056526293335794186 -
                           b_states_idx_1_tmp * 0.0010055485999466529) +
                          c_states_idx_1_tmp * 0.000220700460660805) +
                         (d_states_idx_1_tmp * -8.4646223572708024E-5 +
                          e_states_idx_1_tmp * -2.5264095230154079E-8)) +
                        ((((e_alpha_tmp_tmp_tmp * -2.8999706422462361E-6 +
                            d_alpha_tmp_tmp_tmp * 1.144971584202283E-6) +
                           c_alpha_tmp_tmp_tmp * -4.0116902988057029E-9) +
                          b_alpha_tmp_tmp_tmp * 2.2719422711615941E-10) +
                         alpha_tmp * -3.402947891702986E-12);
  g_alpha_tmp_tmp_tmp = (((b_alpha_tmp * -0.0028263146667897089 +
                           c_alpha_tmp * 0.00050277429997332666) +
                          alpha_tmp_tmp * -0.0001103502303304025) +
                         (b_alpha_tmp_tmp * 4.2323111786354012E-5 +
                          g_alpha_tmp_tmp * 1.263204761507704E-8)) +
                        ((((h_alpha_tmp_tmp * 1.449985321123118E-6 +
                            i_alpha_tmp_tmp * -5.7248579210114139E-7) +
                           t41 * 2.0058451494028519E-9) +
                          j_alpha_tmp_tmp * -1.135971135580797E-10) +
                         b_t31 * 1.701473945851493E-12);
  alpha_tmp_tmp_tmp =
      (((t45 * -0.0028263146667897089 + b_t33 * 0.00050277429997332666) +
        t51 * -0.0001103502303304025) +
       (b_t35 * 4.2323111786354012E-5 +
        f_alpha_tmp_tmp * 1.263204761507704E-8)) +
      ((((t53 * 1.449985321123118E-6 +
          e_alpha_tmp_tmp * -5.7248579210114139E-7) +
         d_alpha_tmp_tmp * 2.0058451494028519E-9) +
        c_alpha_tmp_tmp * -1.135971135580797E-10) +
       t14 * 1.701473945851493E-12);
  // === Subsystem sysThrustCalc ==============================================
  //  Defined at main (main.m:59)
  //  Call sys_674cfd48df4a3213d3be218b57f43a70_jac
  // SYS_674CFD48DF4A3213D3BE218B57F43A70_JAC
  //     [OUT1,OUT2,J_OUT1,J_OUT2,H_OUT1,H_OUT2] =
  //     SYS_674CFD48DF4A3213D3BE218B57F43A70_JAC(IN1VAL1,IN2VAL1,IN3VAL1) This
  //     function was generated by the Symbolic Math Toolbox version 8.7.
  //     26-Jan-2023 16:21:17
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1]}
  // Constant outputs : [false true]
  t2 = states[2] * 2.2557695644629531E-5;
  t5 = std::pow(t2 + 1.0, 4.2586437952291609);
  t7 = 1.0 / std::sqrt(states[2] * 2.6117 + 115778.67);
  d_alpha_tmp_tmp = states[3] * t7 * 0.35 + 1.0;
  c_alpha_tmp_tmp = states[10] * t5;
  b_alpha_tmp_tmp = c_alpha_tmp_tmp * d_alpha_tmp_tmp * 88980.389911198668;
  //  Hessian Jacobian for sys_674cfd48df4a3213d3be218b57f43a70_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_674cfd48df4a3213d3be218b57f43a70_jac
  c_alpha_tmp =
      states[10] * std::pow(t2 + 1.0, 3.2586437952291609) * d_alpha_tmp_tmp *
          8.54791811574036 -
      states[3] * states[10] * t5 * std::pow(t7, 3.0) * 40668.264757938567;
  b_alpha_tmp = c_alpha_tmp_tmp * t7 * 31143.136468919529;
  c_alpha_tmp_tmp = t5 * d_alpha_tmp_tmp * 88980.389911198668;
  // === Subsystem sysTranslationPropagation ==================================
  //  Defined at main (main.m:64)
  //  Call sys_5fe1108a3442fb37379a14c6cc0d697e_jac
  // SYS_5FE1108A3442FB37379A14C6CC0D697E_JAC
  //     [OUT1,OUT2,OUT3,OUT4,OUT5,J_OUT1,J_OUT2,J_OUT3,J_OUT4,J_OUT5,H_OUT1,H_OUT2,H_OUT3,H_OUT4,H_OUT5]
  //     =
  //     SYS_5FE1108A3442FB37379A14C6CC0D697E_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1,IN7VAL1,IN8VAL1,IN9VAL1,IN10VAL1,IN11VAL1,IN12VAL1,IN13VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     26-Jan-2023 16:21:18
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1],
  // [1 1], [1 1], [1 1], [1 1], [1 1]} Derivative inputs: [true true true true
  // true true true true true true true true true] DerivativeOrder  : 1 Output
  // dimensions: {[1 1], [4 1], [1 1], [1 1], [1 1]} Constant outputs : [false
  // false false false false]
  t2 = std::cos(alpha);
  t3 = std::sin(alpha);
  t13 = 1.0 / states[3];
  t15 = 1.0 / states[8];
  t18 = states[9] / 2.0;
  t14 = states[2] * 2.2557695644629531E-5;
  t11 = b_alpha_tmp_tmp * t2;
  t12 = b_alpha_tmp_tmp * t3;
  t16 = t15 * t15;
  b_t30 = t22_tmp * t13 * 9.81;
  b_t31 = b_t22_tmp * t13 * 9.81;
  b_t33 = t2_tmp * t13 * 9.81;
  b_t34 = t3_tmp * t13 * 9.81;
  b_t35 = t4_tmp * t13 * 9.81;
  b_t36 = t5_tmp * t13 * 9.81;
  t42 = t21_tmp * 19.62 + b_t21_tmp * 19.62;
  t25 = states[4] * states[6] * 2.0 + -(states[5] * states[7] * 2.0);
  t44 = std::pow(t14 + 1.0, 3.2586437952291609);
  t45 = std::pow(t14 + 1.0, 4.2586437952291609);
  t46 = t13 * t42 / 2.0;
  t48 = t11_tmp * t13 * 9.81 + -(t14_tmp * t13 * 9.81);
  alpha_tmp = CL * b_t14_tmp;
  t51 = t12 + alpha_tmp * t45 * 17.074078592196649;
  e_alpha_tmp_tmp = CD * b_t14_tmp;
  t52 = (-t11 + states[8] * t25) + e_alpha_tmp_tmp * t45 * 17.074078592196649;
  t53 = -(states[8] * t29_tmp) + t51;
  t54 = t13 * t15 * t53 * 4.905;
  //  Hessian Jacobian for sys_5fe1108a3442fb37379a14c6cc0d697e_jac
  for (i = 0; i < 15; i++) {
    signed char i3;
    i1 = i << 2;
    alpha_tmp_tmp =
        ((states_idx_0 *
              tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1] +
          f_alpha_tmp_tmp_tmp *
              tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 + 1]) +
         g_alpha_tmp_tmp_tmp *
             tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 + 2]) +
        alpha_tmp_tmp_tmp *
            tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 + 3];
    j_CD[i] = alpha_tmp_tmp;
    i2 = j_states[12 * i + 2];
    i3 = j_states[12 * i + 3];
    f_alpha_tmp_tmp =
        (c_alpha_tmp * static_cast<double>(i2) +
         b_alpha_tmp * static_cast<double>(i3)) +
        c_alpha_tmp_tmp * static_cast<double>(j_states[12 * i + 10]);
    j_T[i] = f_alpha_tmp_tmp;
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i] = i2;
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 1] = i3;
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 2] =
        j_states[12 * i + 4];
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 3] =
        j_states[12 * i + 5];
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 4] =
        j_states[12 * i + 6];
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 5] =
        j_states[12 * i + 7];
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 6] =
        j_states[12 * i + 8];
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 7] =
        j_states[12 * i + 9];
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 8] =
        f_alpha_tmp_tmp;
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 9] =
        alpha_tmp_tmp;
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 10] = j_CL[i];
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 11] =
        j_alpha[i];
    tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[13 * i + 12] = 0.0;
  }
  //  Calculation of Jacobian with respect to function global input for
  //  sys_5fe1108a3442fb37379a14c6cc0d697e_jac
  b_states[0] = t8_tmp * CL * t15 * t44 * -0.0080453017323396;
  b_states[1] = t10_tmp * CL * t15 * t44 * -0.0080453017323396;
  b_states[2] = t6_tmp * CL * t15 * t44 * 0.0080453017323396;
  b_states[3] = t7_tmp * CL * t15 * t44 * 0.0080453017323396;
  c_alpha_tmp_tmp = states[6] * c_t14_tmp;
  d_alpha_tmp_tmp = states[7] * c_t14_tmp;
  b_states[4] = (d_alpha_tmp_tmp * t42 / 2.0 -
                 states[6] * CL * t15 * t45 * 167.4967109894491) +
                c_alpha_tmp_tmp * t15 * t53 * 4.905;
  b_states[5] = (c_alpha_tmp_tmp * t42 * -0.5 -
                 states[7] * CL * t15 * t45 * 167.4967109894491) +
                d_alpha_tmp_tmp * t15 * t53 * 4.905;
  c_alpha_tmp_tmp = states[4] * c_t14_tmp;
  d_alpha_tmp_tmp = states[5] * c_t14_tmp;
  b_states[6] = (d_alpha_tmp_tmp * t42 / 2.0 +
                 states[4] * CL * t15 * t45 * 167.4967109894491) -
                c_alpha_tmp_tmp * t15 * t53 * 4.905;
  b_states[7] = (c_alpha_tmp_tmp * t42 * -0.5 +
                 states[5] * CL * t15 * t45 * 167.4967109894491) -
                d_alpha_tmp_tmp * t15 * t53 * 4.905;
  b_states[8] = t48;
  b_states[9] = (t18 + b_t30) + b_t31;
  b_states[10] = (-b_t33 - b_t34) + t54;
  b_states[11] = t46;
  b_states[12] = (-t18 + -b_t30) + -b_t31;
  b_states[13] = t48;
  b_states[14] = -t46;
  b_states[15] = (b_t33 + b_t34) + t54;
  b_states[16] = (-b_t35 - b_t36) + -t54;
  b_states[17] = t46;
  b_states[18] = t48;
  b_states[19] = (-t18 + b_t30) + b_t31;
  b_states[20] = -t46;
  b_states[21] = (b_t35 + b_t36) + -t54;
  b_states[22] = (t18 + -b_t30) + -b_t31;
  b_states[23] = t48;
  c_alpha_tmp_tmp = states[6] * t13;
  d_alpha_tmp_tmp = c_alpha_tmp_tmp * t15;
  b_states[24] =
      d_alpha_tmp_tmp * t29_tmp * 4.905 + c_alpha_tmp_tmp * t16 * t53 * 4.905;
  c_alpha_tmp_tmp = states[7] * t13;
  b_t35 = c_alpha_tmp_tmp * t15;
  b_states[25] = b_t35 * t29_tmp * 4.905 + c_alpha_tmp_tmp * t16 * t53 * 4.905;
  t14 = states[4] * t13;
  b_states[26] = t14 * t15 * t29_tmp * -4.905 - t14 * t16 * t53 * 4.905;
  t14 = states[5] * t13;
  b_states[27] = t14 * t15 * t29_tmp * -4.905 - t14 * t16 * t53 * 4.905;
  b_states[28] = states[5] * -0.5;
  b_states[29] = states[4] / 2.0;
  b_states[30] = states[7] / 2.0;
  b_states[31] = states[6] * -0.5;
  b_states[32] = states[6] * t3 * t13 * t15 * -4.905;
  b_states[33] = states[7] * t3 * t13 * t15 * -4.905;
  b_states[34] = states[4] * t3 * t13 * t15 * 4.905;
  b_states[35] = states[5] * t3 * t13 * t15 * 4.905;
  b_states[36] = 0.0;
  b_states[37] = 0.0;
  b_states[38] = 0.0;
  b_states[39] = 0.0;
  b_states[40] = t8_tmp * t15 * t45 * -83.748355494724549;
  b_states[41] = t10_tmp * t15 * t45 * -83.748355494724549;
  b_states[42] = t6_tmp * t15 * t45 * 83.748355494724549;
  b_states[43] = t7_tmp * t15 * t45 * 83.748355494724549;
  b_states[44] = states[6] * t11 * t13 * t15 * -4.905;
  b_states[45] = states[7] * t11 * t13 * t15 * -4.905;
  b_states[46] = states[4] * t11 * t13 * t15 * 4.905;
  b_states[47] = states[5] * t11 * t13 * t15 * 4.905;
  b_states[48] = 0.0;
  b_states[49] = 0.0;
  b_states[50] = 0.0;
  b_states[51] = 0.0;
  for (i = 0; i < 4; i++) {
    for (i1 = 0; i1 < 15; i1++) {
      alpha_tmp_tmp = 0.0;
      for (j_states_tmp = 0; j_states_tmp < 13; j_states_tmp++) {
        alpha_tmp_tmp +=
            b_states[i + (j_states_tmp << 2)] *
            tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[j_states_tmp +
                                                                 13 * i1];
      }
      tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i + (i1 << 2)] =
          alpha_tmp_tmp;
    }
  }
  // === Subsystem sysCommandsDelay ===========================================
  //  Defined at main (main.m:69)
  //  Call sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  // SYS_2E11DA000B4BBADF99D6DD9A0951F18B_JAC
  //     [OUT1,OUT2,OUT3,J_OUT1,J_OUT2,J_OUT3,H_OUT1,H_OUT2,H_OUT3] =
  //     SYS_2E11DA000B4BBADF99D6DD9A0951F18B_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:25:05
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1], [1 1]}
  // Constant outputs : [false false false]
  //  Hessian Jacobian for sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  // === Split Variable rdot_E ================================================
  // === Split Variable edot_P ================================================
  //  Combine Variables to statesdot
  statesdot[0] = states[3] * t30;
  statesdot[1] = states[3] * c_t22_tmp;
  statesdot[2] = -states[3] * t23;
  statesdot[3] = t15 * t52 * -9.81;
  statesdot[4] = (states[5] * states[9] * -0.5 - c_alpha_tmp_tmp * t42 / 2.0) -
                 d_alpha_tmp_tmp * t53 * 4.905;
  statesdot[5] = (states[4] * t18 + states[6] * t46) - b_t35 * t53 * 4.905;
  statesdot[6] = (states[7] * t18 + states[4] * t54) - t14 * t42 / 2.0;
  statesdot[7] =
      (states[6] * states[9] * -0.5 + states[4] * t46) + states[5] * t54;
  statesdot[8] = -b_alpha_tmp_tmp * 0.0002138;
  statesdot[9] = states[9] * -10.0 + controls[0] * 10.0;
  statesdot[10] = states[10] * -10.0 + controls[1] * 10.0;
  statesdot[11] = states[11] * -10.0 + controls[2] * 10.0;
  b_CD[0] = e_alpha_tmp_tmp * t15 * t44 * -0.0160906034646792;
  b_CD[1] = states[3] * CD * t15 * t45 * -334.9934219788982;
  b_CD[2] = states[6] * -19.62;
  b_CD[3] = states[7] * 19.62;
  b_CD[4] = states[4] * -19.62;
  b_CD[5] = states[5] * 19.62;
  b_CD[6] = t15 * t25 * -9.81 + t16 * t52 * 9.81;
  b_CD[7] = 0.0;
  b_CD[8] = t2 * t15 * 9.81;
  b_t35 = b_t14_tmp * t15 * t45;
  b_CD[9] = b_t35 * -167.4967109894491;
  b_CD[10] = 0.0;
  b_CD[11] = t12 * t15 * -9.81;
  b_CD[12] = 0.0;
  std::memset(&dv[0], 0, 8U * sizeof(double));
  dv[8] = -0.0002138;
  dv[9] = 0.0;
  dv[10] = 0.0;
  dv[11] = 0.0;
  dv[12] = -b_alpha_tmp_tmp;
  //  Combine Variables to outputs
  outputs[0] = std::atan2(c_t21_tmp, t29_tmp);
  outputs[1] = std::asin(t23);
  outputs[2] = std::atan2(c_t22_tmp, t30);
  outputs[3] = alpha;
  outputs[4] = CL;
  outputs[5] = CD;
  outputs[6] = b_alpha_tmp_tmp;
  outputs[7] = 0.0002138;
  outputs[8] = t15 * t51;
  outputs[9] = -states[8];
  dv1[0] = 0.0;
  alpha_tmp_tmp = t31 * (1.0 / (c_t21_tmp * c_t21_tmp + t31));
  dv1[1] = alpha_tmp_tmp *
           (states[5] * t34 * 2.0 - states[4] * c_t21_tmp * t36 * 2.0);
  dv1[2] = alpha_tmp_tmp *
           (states[4] * t34 * 2.0 + states[5] * c_t21_tmp * t36 * 2.0);
  dv1[3] = alpha_tmp_tmp *
           (states[7] * t34 * 2.0 + states[6] * c_t21_tmp * t36 * 2.0);
  dv1[4] = alpha_tmp_tmp *
           (states[6] * t34 * 2.0 - states[7] * c_t21_tmp * t36 * 2.0);
  dv2[0] = 0.0;
  dv2[1] = states[6] * t33 * 2.0;
  dv2[2] = states[7] * t33 * -2.0;
  dv2[3] = states[4] * t33 * 2.0;
  dv2[4] = states[5] * t33 * -2.0;
  dv3[0] = 0.0;
  alpha_tmp_tmp = t32 * (1.0 / (c_t22_tmp * c_t22_tmp + t32));
  dv3[1] = alpha_tmp_tmp *
           (states[7] * t35 * 2.0 - states[4] * c_t22_tmp * t37 * 2.0);
  dv3[2] = alpha_tmp_tmp *
           (states[6] * t35 * 2.0 - states[5] * c_t22_tmp * t37 * 2.0);
  dv3[3] = alpha_tmp_tmp *
           (states[5] * t35 * 2.0 + states[6] * c_t22_tmp * t37 * 2.0);
  dv3[4] = alpha_tmp_tmp *
           (states[4] * t35 * 2.0 + states[7] * c_t22_tmp * t37 * 2.0);
  for (i = 0; i < 15; i++) {
    int c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 12 * i + 9;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i] =
        j_states[tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 12 * i + 10;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 1] =
        j_states[b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp = 12 * i + 11;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 2] =
        j_states[c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp];
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 3] =
        j_controls[3 * i];
    j_states_tmp = 3 * i + 1;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 4] =
        j_controls[j_states_tmp];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac_tmp = 3 * i + 2;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 5] =
        j_controls[tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac_tmp];
    alpha_tmp_tmp = 0.0;
    f_alpha_tmp_tmp = 0.0;
    for (i1 = 0; i1 < 13; i1++) {
      t14 = tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[i1 + 13 * i];
      alpha_tmp_tmp += b_CD[i1] * t14;
      f_alpha_tmp_tmp += dv[i1] * t14;
    }
    t14 = 0.0;
    c_alpha_tmp_tmp = 0.0;
    d_alpha_tmp_tmp = 0.0;
    for (i1 = 0; i1 < 6; i1++) {
      i2 = tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[i1 + 6 * i];
      t14 += static_cast<double>(c_a[i1] * i2);
      c_alpha_tmp_tmp += static_cast<double>(d_a[i1] * i2);
      d_alpha_tmp_tmp += static_cast<double>(e_a[i1] * i2);
    }
    j_statesdot[12 * i] = j_rdot_E[3 * i];
    j_statesdot[12 * i + 1] = j_rdot_E[j_states_tmp];
    j_statesdot[12 * i + 2] =
        j_rdot_E[tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac_tmp];
    j_statesdot[12 * i + 3] = alpha_tmp_tmp;
    j_states_tmp = i << 2;
    j_statesdot[12 * i + 4] =
        tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp];
    j_statesdot[12 * i + 5] =
        tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp + 1];
    j_statesdot[12 * i + 6] =
        tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp + 2];
    j_statesdot[12 * i + 7] =
        tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp + 3];
    j_statesdot[12 * i + 8] = f_alpha_tmp_tmp;
    j_statesdot[tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp] = t14;
    j_statesdot[b_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp] =
        c_alpha_tmp_tmp;
    j_statesdot[c_tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac_tmp] =
        d_alpha_tmp_tmp;
    alpha_tmp_tmp = 0.0;
    f_alpha_tmp_tmp = 0.0;
    t14 = 0.0;
    for (i1 = 0; i1 < 5; i1++) {
      i2 = tmp_j_input_sys_9ad26b3366587637edbbdc61512a5773_jac[i1 + 5 * i];
      alpha_tmp_tmp += dv1[i1] * static_cast<double>(i2);
      f_alpha_tmp_tmp += dv2[i1] * static_cast<double>(i2);
      t14 += dv3[i1] * static_cast<double>(i2);
    }
    a[i] = t14;
    c_CD[i] = f_alpha_tmp_tmp;
    dv4[i] = alpha_tmp_tmp;
  }
  b_CD[0] = alpha_tmp * t15 * t44 * 0.001640224614136514;
  b_CD[1] = states[3] * CL * t15 * t45 * 34.148157184393291;
  b_CD[2] = 0.0;
  b_CD[3] = 0.0;
  b_CD[4] = 0.0;
  b_CD[5] = 0.0;
  b_CD[6] = -t16 * t51;
  b_CD[7] = 0.0;
  b_CD[8] = t3 * t15;
  b_CD[9] = 0.0;
  b_CD[10] = b_t35 * 17.074078592196649;
  b_CD[11] = t11 * t15;
  b_CD[12] = 0.0;
  for (i = 0; i < 15; i++) {
    alpha_tmp_tmp = 0.0;
    f_alpha_tmp_tmp = 0.0;
    for (i1 = 0; i1 < 13; i1++) {
      t14 = tmp_j_input_sys_5fe1108a3442fb37379a14c6cc0d697e_jac[i1 + 13 * i];
      alpha_tmp_tmp += b_CD[i1] * t14;
      f_alpha_tmp_tmp += static_cast<double>(b_a[i1]) * t14;
    }
    j_outputs[10 * i] = dv4[i];
    j_outputs[10 * i + 1] = c_CD[i];
    j_outputs[10 * i + 2] = a[i];
    j_outputs[10 * i + 3] = j_alpha[i];
    j_outputs[10 * i + 4] = j_CL[i];
    j_outputs[10 * i + 5] = j_CD[i];
    j_outputs[10 * i + 6] = j_T[i];
    j_outputs[10 * i + 7] = 0.0;
    j_outputs[10 * i + 8] = alpha_tmp_tmp;
    j_outputs[10 * i + 9] = f_alpha_tmp_tmp;
  }
}

void mb_OptimalManeuver_initialize()
{
}

void mb_OptimalManeuver_terminate()
{
  // (no terminate code required)
}

// End of code generation (mb_OptimalManeuver.cpp)
