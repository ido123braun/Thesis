//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// mb_OptimalManeuver.cpp
//
// Code generation for function 'mb_OptimalManeuver'
//

// Include files
#include "mb_OptimalManeuver.h"
#include <cmath>
#include <cstring>

// Function Definitions
void mb_OptimalManeuver(const double states[11], const double controls[3],
                        double statesdot[11], double outputs[7],
                        double j_statesdot[154], double j_outputs[98])
{
  static const signed char iv[121]{
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};
  static const signed char a[11]{0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0};
  static const signed char iv1[9]{1, 0, 0, 0, 1, 0, 0, 0, 1};
  static const signed char b_a[6]{-10, 0, 0, 10, 0, 0};
  static const signed char c_a[6]{0, -10, 0, 0, 10, 0};
  static const signed char d_a[6]{0, 0, -10, 0, 0, 10};
  double tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac[154];
  double j_rdot_E[42];
  double j_CD[14];
  double j_CL[14];
  double j_T[14];
  double j_alpha[14];
  double t2[12];
  double b_CD[11];
  double b_states[11];
  double c_states[11];
  double d_states[11];
  double dv[11];
  double CD;
  double CL;
  double alpha;
  double alpha_tmp;
  double alpha_tmp_tmp;
  double alpha_tmp_tmp_tmp;
  double b_alpha_tmp;
  double b_alpha_tmp_tmp;
  double b_alpha_tmp_tmp_tmp;
  double b_states_idx_0_tmp;
  double b_states_idx_1_tmp;
  double b_t14_tmp;
  double b_t2;
  double b_t2_tmp;
  double b_t7;
  double c_alpha_tmp;
  double c_alpha_tmp_tmp;
  double c_alpha_tmp_tmp_tmp;
  double c_states_idx_0_tmp;
  double c_states_idx_1_tmp;
  double d_alpha_tmp;
  double d_alpha_tmp_tmp;
  double d_alpha_tmp_tmp_tmp;
  double d_states_idx_0_tmp;
  double d_states_idx_1_tmp;
  double e_alpha_tmp;
  double e_alpha_tmp_tmp;
  double e_alpha_tmp_tmp_tmp;
  double e_states_idx_0_tmp;
  double f_alpha_tmp;
  double f_alpha_tmp_tmp;
  double f_alpha_tmp_tmp_tmp;
  double f_states_idx_0_tmp;
  double g_alpha_tmp_tmp;
  double g_alpha_tmp_tmp_tmp;
  double g_states_idx_0_tmp;
  double h_alpha_tmp_tmp;
  double h_alpha_tmp_tmp_tmp;
  double h_states_idx_0_tmp;
  double i_alpha_tmp_tmp;
  double i_states_idx_0_tmp;
  double j_alpha_tmp_tmp;
  double j_states_idx_0_tmp;
  double states_idx_0;
  double states_idx_0_tmp;
  double states_idx_1_tmp;
  double t10;
  double t11;
  double t13;
  double t14;
  double t14_tmp;
  double t15;
  double t16;
  double t17;
  double t19;
  double t20;
  double t24;
  double t25;
  double t26;
  double t28;
  double t29;
  double t2_tmp;
  double t3;
  double t4;
  double t41;
  double t4_tmp;
  double t5;
  double t6;
  double t7;
  double t9;
  int i;
  int i1;
  int j_states_tmp;
  signed char j_states[154];
  signed char tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[84];
  signed char tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[56];
  signed char j_controls[42];
  signed char i2;
  signed char i3;
  signed char i4;
  // mb_OptimalManeuver
  //  File automatically generated by FALCON.m
  // === Extract Data From Input ==============================================
  // === Jacobians and Hessians ===============================================
  std::memset(&j_states[0], 0, 154U * sizeof(signed char));
  for (i = 0; i < 11; i++) {
    for (i1 = 0; i1 < 11; i1++) {
      j_states_tmp = i1 + 11 * i;
      j_states[j_states_tmp] = iv[j_states_tmp];
    }
  }
  for (i = 0; i < 42; i++) {
    j_controls[i] = 0;
  }
  for (i = 0; i < 3; i++) {
    j_states_tmp = 3 * (i + 11);
    j_controls[j_states_tmp] = iv1[3 * i];
    j_controls[j_states_tmp + 1] = iv1[3 * i + 1];
    j_controls[j_states_tmp + 2] = iv1[3 * i + 2];
  }
  // === Write Constants ======================================================
  // === Subsystem sysPositionPropagation =====================================
  //  Defined at main (main.m:45)
  //  Call sys_6660ca7b3a59f873d788ad4c209e1c7d_jac
  // SYS_6660CA7B3A59F873D788AD4C209E1C7D_JAC
  //     [OUT1,J_OUT1,H_OUT1] =
  //     SYS_6660CA7B3A59F873D788AD4C209E1C7D_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     25-Jan-2023 22:41:47
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[3 1]}
  // Constant outputs : false
  t2_tmp = std::cos(states[5]);
  t3 = std::cos(states[6]);
  t4_tmp = std::sin(states[5]);
  t5 = std::sin(states[6]);
  t17 = states[3] * t2_tmp;
  t6 = t17 * t3;
  t7 = t17 * t5;
  //  Hessian Jacobian for sys_6660ca7b3a59f873d788ad4c209e1c7d_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_6660ca7b3a59f873d788ad4c209e1c7d_jac
  t2[0] = t2_tmp * t3;
  t2[1] = t2_tmp * t5;
  t2[2] = -t4_tmp;
  t2[3] = 0.0;
  t2[4] = 0.0;
  t2[5] = 0.0;
  t2[6] = -states[3] * t3 * t4_tmp;
  b_t2_tmp = -states[3] * t4_tmp;
  t2[7] = b_t2_tmp * t5;
  t2[8] = -states[3] * t2_tmp;
  t2[9] = -t7;
  t2[10] = t6;
  t2[11] = 0.0;
  for (i = 0; i < 14; i++) {
    j_states_tmp = i << 2;
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp] =
        j_states[11 * i + 3];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp + 1] =
        j_states[11 * i + 4];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp + 2] =
        j_states[11 * i + 5];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp + 3] =
        j_states[11 * i + 6];
  }
  for (i = 0; i < 3; i++) {
    alpha_tmp_tmp = t2[i];
    alpha_tmp = t2[i + 3];
    t29 = t2[i + 6];
    b_alpha_tmp_tmp = t2[i + 9];
    for (i1 = 0; i1 < 14; i1++) {
      j_states_tmp = i1 << 2;
      j_rdot_E[i + 3 * i1] =
          ((alpha_tmp_tmp *
                static_cast<double>(
                    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac
                        [j_states_tmp]) +
            alpha_tmp * static_cast<double>(
                            tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac
                                [j_states_tmp + 1])) +
           t29 * static_cast<double>(
                     tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac
                         [j_states_tmp + 2])) +
          b_alpha_tmp_tmp *
              static_cast<double>(
                  tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac
                      [j_states_tmp + 3]);
    }
  }
  double b_t6;
  double i_alpha_tmp_tmp_tmp;
  double j_alpha_tmp_tmp_tmp;
  double t12;
  double t18;
  double t21;
  double t22;
  double t23;
  double t30;
  double t32;
  double t34;
  double t36;
  double t38;
  double t42;
  double t44;
  double t46;
  double t48;
  double t50;
  double t52;
  double t54;
  double t56;
  double t58;
  double t60;
  double t8;
  // === Subsystem sysAeroCalc ================================================
  //  Defined at main (main.m:50)
  //  Call sys_abd1dd15ef234fda3363cddb8e59878b_jac
  // SYS_ABD1DD15EF234FDA3363CDDB8E59878B_JAC
  //     [OUT1,OUT2,OUT3,J_OUT1,J_OUT2,J_OUT3,H_OUT1,H_OUT2,H_OUT3] =
  //     SYS_ABD1DD15EF234FDA3363CDDB8E59878B_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     25-Jan-2023 22:41:47
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1], [1 1]}
  // Constant outputs : [false false false]
  b_t2 = states[10] * states[10];
  t3 = std::pow(states[10], 3.0);
  t5 = std::pow(states[10], 5.0);
  b_t7 = std::pow(states[10], 7.0);
  t8 = states[7] * states[7];
  t9 = std::pow(states[7], 3.0);
  t11 = std::pow(states[7], 5.0);
  t13 = std::pow(states[7], 7.0);
  t14_tmp = states[3] * states[3];
  b_t14_tmp = 1.0 / t14_tmp;
  t15 = 1.0 / std::pow(states[3], 3.0);
  t4 = b_t2 * b_t2;
  b_t6 = std::pow(b_t2, 3.0);
  t10 = t8 * t8;
  t12 = std::pow(t8, 3.0);
  t16 = b_t14_tmp * b_t14_tmp;
  t18 = std::pow(b_t14_tmp, 3.0);
  t21 = std::pow(t3, 3.0);
  t22 = std::pow(b_t2, 5.0);
  t24 = std::pow(t9, 3.0);
  t25 = std::pow(t8, 5.0);
  t28 = std::pow(b_t14_tmp, 5.0);
  t32 = std::pow(b_t14_tmp, 7.0);
  t41 = states[2] * 2.2557695644629531E-5 + 1.0;
  t20 = t4 * t4;
  t23 = t10 * t10;
  t26 = t16 * t16;
  t30 = std::pow(t16, 3.0);
  t36 = std::pow(t18, 3.0);
  t38 = std::pow(t16, 5.0);
  t42 = 1.0 / std::pow(t41, 29.810506566604129);
  t44 = 1.0 / std::pow(t41, 4.2586437952291609);
  t34 = t26 * t26;
  t46 = t44 * t44;
  t48 = std::pow(t44, 3.0);
  t52 = std::pow(t44, 5.0);
  t50 = t46 * t46;
  t54 = std::pow(t46, 3.0);
  t58 = std::pow(t48, 3.0);
  t60 = std::pow(t46, 5.0);
  t56 = t50 * t50;
  alpha_tmp_tmp_tmp = states[7] * states[10];
  c_alpha_tmp_tmp = alpha_tmp_tmp_tmp * b_t14_tmp;
  t17 = c_alpha_tmp_tmp * t44;
  b_alpha_tmp_tmp_tmp = b_t2 * t8;
  d_alpha_tmp_tmp = b_alpha_tmp_tmp_tmp * t16;
  b_alpha_tmp = d_alpha_tmp_tmp * t46;
  c_alpha_tmp_tmp_tmp = t3 * t9;
  e_alpha_tmp_tmp = c_alpha_tmp_tmp_tmp * t18;
  alpha_tmp = e_alpha_tmp_tmp * t48;
  d_alpha_tmp_tmp_tmp = t4 * t10;
  b_alpha_tmp_tmp = d_alpha_tmp_tmp_tmp * t26;
  t29 = b_alpha_tmp_tmp * t50;
  e_alpha_tmp_tmp_tmp = b_t7 * t13;
  f_alpha_tmp_tmp = e_alpha_tmp_tmp_tmp * t32;
  c_alpha_tmp = f_alpha_tmp_tmp * t42;
  f_alpha_tmp_tmp_tmp = t5 * t11;
  g_alpha_tmp_tmp = f_alpha_tmp_tmp_tmp * t28;
  d_alpha_tmp = g_alpha_tmp_tmp * t52;
  g_alpha_tmp_tmp_tmp = b_t6 * t12;
  alpha_tmp_tmp = g_alpha_tmp_tmp_tmp * t30;
  e_alpha_tmp = alpha_tmp_tmp * t54;
  h_alpha_tmp_tmp_tmp = t20 * t23;
  h_alpha_tmp_tmp = h_alpha_tmp_tmp_tmp * t34;
  f_alpha_tmp = h_alpha_tmp_tmp * t56;
  i_alpha_tmp_tmp_tmp = t21 * t24;
  i_alpha_tmp_tmp = i_alpha_tmp_tmp_tmp * t36;
  t14 = i_alpha_tmp_tmp * t58;
  j_alpha_tmp_tmp_tmp = t22 * t25;
  j_alpha_tmp_tmp = j_alpha_tmp_tmp_tmp * t38;
  t19 = j_alpha_tmp_tmp * t60;
  alpha =
      ((((t17 * 0.014345619572951881 + b_alpha_tmp * 9.260716983790664E-5) +
         alpha_tmp * -1.5347140792949311E-5) +
        (t29 * 3.7537393593212812E-6 + c_alpha_tmp * 6.8569306861973568E-10)) +
       ((((d_alpha_tmp * 1.0170526449357679E-7 +
           e_alpha_tmp * -3.5462236672989408E-8) +
          f_alpha_tmp * 9.3388466194067771E-11) +
         t14 * -4.71752534419257E-12) +
        t19 * 6.3607941133378246E-14)) +
      -0.027385456961207789;
  CL = t17 * 0.05856831421972189;
  CD =
      ((((t17 * -0.0028263146667897089 + b_alpha_tmp * 0.00025138714998666339) +
         alpha_tmp * -3.6783410110134163E-5) +
        (t29 * 1.05807779465885E-5 + c_alpha_tmp * 1.8045782307252909E-9)) +
       ((((d_alpha_tmp * 2.8999706422462358E-7 +
           e_alpha_tmp * -9.5414298683523566E-8) +
          f_alpha_tmp * 2.5073064367535648E-10) +
         t14 * -1.26219015064533E-11) +
        t19 * 1.7014739458514929E-13)) +
      0.027612476522558611;
  //  Hessian Jacobian for sys_abd1dd15ef234fda3363cddb8e59878b_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_abd1dd15ef234fda3363cddb8e59878b_jac
  states_idx_0_tmp =
      c_alpha_tmp_tmp * (1.0 / std::pow(t41, 5.2586437952291609));
  b_states_idx_0_tmp =
      d_alpha_tmp_tmp * (1.0 / std::pow(t41, 9.5172875904583218));
  c_states_idx_0_tmp =
      e_alpha_tmp_tmp * (1.0 / std::pow(t41, 13.77593138568748));
  d_states_idx_0_tmp =
      b_alpha_tmp_tmp * (1.0 / std::pow(t41, 18.03457518091664));
  e_states_idx_0_tmp =
      f_alpha_tmp_tmp * (1.0 / std::pow(t41, 30.810506566604129));
  f_states_idx_0_tmp =
      g_alpha_tmp_tmp * (1.0 / std::pow(t41, 22.293218976145809));
  g_states_idx_0_tmp =
      alpha_tmp_tmp * (1.0 / std::pow(t41, 26.551862771374971));
  h_states_idx_0_tmp =
      h_alpha_tmp_tmp * (1.0 / std::pow(t41, 35.069150361833287));
  i_states_idx_0_tmp =
      i_alpha_tmp_tmp * (1.0 / std::pow(t41, 39.327794157062449));
  j_states_idx_0_tmp =
      j_alpha_tmp_tmp * (1.0 / std::pow(t41, 43.586437952291611));
  states_idx_0 = ((((states_idx_0_tmp * -1.3781146784312059E-6 -
                     b_states_idx_0_tmp * 1.77926508412672E-8) +
                    c_states_idx_0_tmp * 4.4229780159355821E-9) +
                   (d_states_idx_0_tmp * -1.4424147479386E-9 +
                    e_states_idx_0_tmp * -4.61098647270391E-13)) +
                  ((f_states_idx_0_tmp * -4.8851678088758041E-11 +
                    g_states_idx_0_tmp * 2.04401191487857E-11) +
                   h_states_idx_0_tmp * -7.17710464319744E-14)) +
                 (i_states_idx_0_tmp * 4.0787097417980116E-15 +
                  j_states_idx_0_tmp * -6.1105089881216707E-17);
  states_idx_1_tmp = alpha_tmp_tmp_tmp * t15 * t44;
  b_states_idx_1_tmp =
      b_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 5.0)) * t46;
  c_states_idx_1_tmp =
      c_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 7.0)) * t48;
  d_states_idx_1_tmp = d_alpha_tmp_tmp_tmp * std::pow(t15, 3.0) * t50;
  e_alpha_tmp_tmp_tmp = e_alpha_tmp_tmp_tmp * std::pow(t15, 5.0) * t42;
  d_alpha_tmp_tmp_tmp =
      f_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 11.0)) * t52;
  c_alpha_tmp_tmp_tmp =
      g_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 13.0)) * t54;
  b_alpha_tmp_tmp_tmp =
      h_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 17.0)) * t56;
  alpha_tmp_tmp_tmp =
      i_alpha_tmp_tmp_tmp * (1.0 / std::pow(states[3], 19.0)) * t58;
  c_alpha_tmp = j_alpha_tmp_tmp_tmp * std::pow(t15, 7.0) * t60;
  g_alpha_tmp_tmp_tmp = (((states_idx_1_tmp * -0.028691239145903762 -
                           b_states_idx_1_tmp * 0.00037042867935162651) +
                          c_states_idx_1_tmp * 9.2082844757695887E-5) +
                         (d_states_idx_1_tmp * -3.0029914874570249E-5 +
                          e_alpha_tmp_tmp_tmp * -9.5997029606763E-9)) +
                        ((((d_alpha_tmp_tmp_tmp * -1.017052644935768E-6 +
                            c_alpha_tmp_tmp_tmp * 4.2554684007587289E-7) +
                           b_alpha_tmp_tmp_tmp * -1.4942154591050839E-9) +
                          alpha_tmp_tmp_tmp * 8.4915456195466259E-11) +
                         c_alpha_tmp * -1.272158822667565E-12);
  e_alpha_tmp = states[7] * b_t14_tmp * t44;
  f_alpha_tmp = states[10] * t8 * t16 * t46;
  c_alpha_tmp_tmp = b_t2 * t9 * t18 * t48;
  d_alpha_tmp_tmp = t3 * t10 * t26 * t50;
  e_alpha_tmp_tmp = b_t6 * t13 * t32 * t42;
  h_alpha_tmp_tmp = t4 * t11 * t28 * t52;
  i_alpha_tmp_tmp = t5 * t12 * t30 * t54;
  t41 = b_t7 * t23 * t34 * t56;
  j_alpha_tmp_tmp = t20 * t24 * t36 * t58;
  alpha_tmp = t21 * t25 * t38 * t60;
  h_alpha_tmp_tmp_tmp = (((e_alpha_tmp * 0.014345619572951881 +
                           f_alpha_tmp * 0.00018521433967581331) +
                          c_alpha_tmp_tmp * -4.6041422378847943E-5) +
                         (d_alpha_tmp_tmp * 1.501495743728512E-5 +
                          e_alpha_tmp_tmp * 4.79985148033815E-9)) +
                        ((((h_alpha_tmp_tmp * 5.0852632246788423E-7 +
                            i_alpha_tmp_tmp * -2.127734200379365E-7) +
                           t41 * 7.4710772955254217E-10) +
                          j_alpha_tmp_tmp * -4.2457728097733129E-11) +
                         alpha_tmp * 6.3607941133378249E-13);
  b_alpha_tmp = states[10] * b_t14_tmp * t44;
  t19 = states[7] * b_t2 * t16 * t46;
  t14 = t3 * t8 * t18 * t48;
  t29 = t4 * t9 * t26 * t50;
  alpha_tmp_tmp = b_t7 * t12 * t32 * t42;
  g_alpha_tmp_tmp = t5 * t10 * t28 * t52;
  f_alpha_tmp_tmp = b_t6 * t11 * t30 * t54;
  b_alpha_tmp_tmp = t13 * t20 * t34 * t56;
  t17 = t21 * t23 * t36 * t58;
  d_alpha_tmp = t22 * t24 * t38 * t60;
  f_alpha_tmp_tmp_tmp =
      (((b_alpha_tmp * 0.014345619572951881 + t19 * 0.00018521433967581331) +
        t14 * -4.6041422378847943E-5) +
       (t29 * 1.501495743728512E-5 + alpha_tmp_tmp * 4.79985148033815E-9)) +
      ((((g_alpha_tmp_tmp * 5.0852632246788423E-7 +
          f_alpha_tmp_tmp * -2.127734200379365E-7) +
         b_alpha_tmp_tmp * 7.4710772955254217E-10) +
        t17 * -4.2457728097733129E-11) +
       d_alpha_tmp * 6.3607941133378249E-13);
  for (i = 0; i < 14; i++) {
    signed char i5;
    j_states_tmp = i << 2;
    i2 = j_states[11 * i + 2];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp] = i2;
    i3 = j_states[11 * i + 3];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp + 1] = i3;
    i4 = j_states[11 * i + 10];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp + 2] = i4;
    i5 = j_states[11 * i + 7];
    tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[j_states_tmp + 3] = i5;
    j_alpha[i] = ((states_idx_0 * static_cast<double>(i2) +
                   g_alpha_tmp_tmp_tmp * static_cast<double>(i3)) +
                  h_alpha_tmp_tmp_tmp * static_cast<double>(i4)) +
                 f_alpha_tmp_tmp_tmp * static_cast<double>(i5);
  }
  states_idx_0 = states_idx_0_tmp * -5.6263762681503669E-6;
  g_alpha_tmp_tmp_tmp = states_idx_1_tmp * -0.11713662843944379;
  h_alpha_tmp_tmp_tmp = e_alpha_tmp * 0.05856831421972189;
  f_alpha_tmp_tmp_tmp = b_alpha_tmp * 0.05856831421972189;
  for (i = 0; i < 14; i++) {
    i1 = i << 2;
    j_CL[i] =
        ((states_idx_0 *
              static_cast<double>(
                  tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1]) +
          g_alpha_tmp_tmp_tmp *
              static_cast<double>(
                  tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 +
                                                                       1])) +
         h_alpha_tmp_tmp_tmp *
             static_cast<double>(
                 tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 +
                                                                      2])) +
        f_alpha_tmp_tmp_tmp *
            static_cast<double>(
                tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 + 3]);
  }
  states_idx_0 = ((((states_idx_0_tmp * 2.7151045713718412E-7 -
                     b_states_idx_0_tmp * 4.8299108951530809E-8) +
                    c_states_idx_0_tmp * 1.0600815908524741E-8) +
                   (d_states_idx_0_tmp * -4.0657778001886287E-9 +
                    e_states_idx_0_tmp * -1.213500061705419E-12)) +
                  ((f_states_idx_0_tmp * -1.392931162288153E-10 +
                    g_states_idx_0_tmp * 5.4995956729218991E-11) +
                   h_states_idx_0_tmp * -1.9269189657476059E-13)) +
                 (i_states_idx_0_tmp * 1.0912728364620441E-14 +
                  j_states_idx_0_tmp * -1.634524188949835E-16);
  g_alpha_tmp_tmp_tmp = (((states_idx_1_tmp * 0.0056526293335794186 -
                           b_states_idx_1_tmp * 0.0010055485999466529) +
                          c_states_idx_1_tmp * 0.000220700460660805) +
                         (d_states_idx_1_tmp * -8.4646223572708024E-5 +
                          e_alpha_tmp_tmp_tmp * -2.5264095230154079E-8)) +
                        ((((d_alpha_tmp_tmp_tmp * -2.8999706422462361E-6 +
                            c_alpha_tmp_tmp_tmp * 1.144971584202283E-6) +
                           b_alpha_tmp_tmp_tmp * -4.0116902988057029E-9) +
                          alpha_tmp_tmp_tmp * 2.2719422711615941E-10) +
                         c_alpha_tmp * -3.402947891702986E-12);
  h_alpha_tmp_tmp_tmp = (((e_alpha_tmp * -0.0028263146667897089 +
                           f_alpha_tmp * 0.00050277429997332666) +
                          c_alpha_tmp_tmp * -0.0001103502303304025) +
                         (d_alpha_tmp_tmp * 4.2323111786354012E-5 +
                          e_alpha_tmp_tmp * 1.263204761507704E-8)) +
                        ((((h_alpha_tmp_tmp * 1.449985321123118E-6 +
                            i_alpha_tmp_tmp * -5.7248579210114139E-7) +
                           t41 * 2.0058451494028519E-9) +
                          j_alpha_tmp_tmp * -1.135971135580797E-10) +
                         alpha_tmp * 1.701473945851493E-12);
  f_alpha_tmp_tmp_tmp =
      (((b_alpha_tmp * -0.0028263146667897089 + t19 * 0.00050277429997332666) +
        t14 * -0.0001103502303304025) +
       (t29 * 4.2323111786354012E-5 + alpha_tmp_tmp * 1.263204761507704E-8)) +
      ((((g_alpha_tmp_tmp * 1.449985321123118E-6 +
          f_alpha_tmp_tmp * -5.7248579210114139E-7) +
         b_alpha_tmp_tmp * 2.0058451494028519E-9) +
        t17 * -1.135971135580797E-10) +
       d_alpha_tmp * 1.701473945851493E-12);
  // === Subsystem sysThrustCalc ==============================================
  //  Defined at main (main.m:55)
  //  Call sys_674cfd48df4a3213d3be218b57f43a70_jac
  // SYS_674CFD48DF4A3213D3BE218B57F43A70_JAC
  //     [OUT1,OUT2,J_OUT1,J_OUT2,H_OUT1,H_OUT2] =
  //     SYS_674CFD48DF4A3213D3BE218B57F43A70_JAC(IN1VAL1,IN2VAL1,IN3VAL1) This
  //     function was generated by the Symbolic Math Toolbox version 8.7.
  //     25-Jan-2023 22:41:48
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1]}
  // Constant outputs : [false true]
  b_t2 = states[2] * 2.2557695644629531E-5;
  t5 = std::pow(b_t2 + 1.0, 4.2586437952291609);
  b_t7 = 1.0 / std::sqrt(states[2] * 2.6117 + 115778.67);
  d_alpha_tmp = states[3] * b_t7 * 0.35 + 1.0;
  t17 = states[9] * t5;
  d_alpha_tmp_tmp = t17 * d_alpha_tmp * 88980.389911198668;
  //  Hessian Jacobian for sys_674cfd48df4a3213d3be218b57f43a70_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_674cfd48df4a3213d3be218b57f43a70_jac
  e_alpha_tmp_tmp =
      states[9] * std::pow(b_t2 + 1.0, 3.2586437952291609) * d_alpha_tmp *
          8.54791811574036 -
      states[3] * states[9] * t5 * std::pow(b_t7, 3.0) * 40668.264757938567;
  c_alpha_tmp_tmp = t17 * b_t7 * 31143.136468919529;
  f_alpha_tmp = t5 * d_alpha_tmp * 88980.389911198668;
  // === Subsystem sysTranslationPropagation ==================================
  //  Defined at main (main.m:60)
  //  Call sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac
  // SYS_95BF0EF0A541E5E15B1E97C1AB8D4011_JAC
  //     [OUT1,OUT2,OUT3,OUT4,OUT5,OUT6,OUT7,J_OUT1,J_OUT2,J_OUT3,J_OUT4,J_OUT5,J_OUT6,J_OUT7,H_OUT1,H_OUT2,H_OUT3,H_OUT4,H_OUT5,H_OUT6,H_OUT7]
  //     =
  //     SYS_95BF0EF0A541E5E15B1E97C1AB8D4011_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1,IN7VAL1,IN8VAL1,IN9VAL1,IN10VAL1,IN11VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     25-Jan-2023 22:41:49
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1], [1 1],
  // [1 1], [1 1], [1 1]} Derivative inputs: [true true true true true true true
  // true true true true] DerivativeOrder  : 1 Output dimensions: {[1 1], [1 1],
  // [1 1], [1 1], [1 1], [1 1], [1 1]} Constant outputs : [false false false
  // false false false false]
  b_t2 = std::cos(states[4]);
  t4 = std::cos(alpha);
  t5 = std::sin(states[4]);
  b_t7 = std::sin(alpha);
  t11 = 1.0 / states[3];
  t13 = 1.0 / states[7];
  t17 = states[2] * 2.2557695644629531E-5;
  t9 = d_alpha_tmp_tmp * t4;
  t10 = d_alpha_tmp_tmp * b_t7;
  t14 = t13 * t13;
  t15 = 1.0 / t2_tmp;
  t16 = t15 * t15;
  t19 = std::pow(t17 + 1.0, 3.2586437952291609);
  t20 = std::pow(t17 + 1.0, 4.2586437952291609);
  e_alpha_tmp = CL * t14_tmp;
  t24 = t10 + e_alpha_tmp * t20 * 17.074078592196649;
  d_alpha_tmp = CD * t14_tmp;
  t25 = t9 + -(d_alpha_tmp * t20 * 17.074078592196649);
  t26 = b_t2 * t13 * t24;
  alpha_tmp = t5 * t11;
  t29 = alpha_tmp * t13 * t24 * 9.81;
  t28 = t2_tmp + -t26;
  //  Hessian Jacobian for sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac
  // === Subsystem sysCommandsDelay ===========================================
  //  Defined at main (main.m:65)
  //  Call sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  // SYS_2E11DA000B4BBADF99D6DD9A0951F18B_JAC
  //     [OUT1,OUT2,OUT3,J_OUT1,J_OUT2,J_OUT3,H_OUT1,H_OUT2,H_OUT3] =
  //     SYS_2E11DA000B4BBADF99D6DD9A0951F18B_JAC(IN1VAL1,IN2VAL1,IN3VAL1,IN4VAL1,IN5VAL1,IN6VAL1)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     30-Dec-2022 22:30:46
  // Generated using CreateGradient
  // Input dimensions : {[1 1], [1 1], [1 1], [1 1], [1 1], [1 1]}
  // Derivative inputs: [true true true true true true]
  // DerivativeOrder  : 1
  // Output dimensions: {[1 1], [1 1], [1 1]}
  // Constant outputs : [false false false]
  //  Hessian Jacobian for sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  //  Calculation of Jacobian with respect to function global input for
  //  sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
  // === Split Variable rdot_E ================================================
  //  Combine Variables to statesdot
  statesdot[0] = t6;
  statesdot[1] = t7;
  statesdot[2] = b_t2_tmp;
  statesdot[3] = t4_tmp * -9.81 + t13 * t25 * 9.81;
  statesdot[4] = states[8] + t4_tmp * t15 * t29;
  statesdot[5] = t11 * t28 * -9.81;
  statesdot[6] = t15 * t29;
  statesdot[7] = -d_alpha_tmp_tmp * 0.0002138;
  statesdot[8] = states[8] * -10.0 + controls[0] * 10.0;
  statesdot[9] = states[9] * -10.0 + controls[1] * 10.0;
  statesdot[10] = states[10] * -10.0 + controls[2] * 10.0;
  b_CD[0] = d_alpha_tmp * t13 * t19 * -0.0160906034646792;
  b_CD[1] = states[3] * CD * t13 * t20 * -334.9934219788982;
  b_CD[2] = 0.0;
  b_CD[3] = t2_tmp * -9.81;
  b_CD[4] = t14 * t25 * -9.81;
  b_CD[5] = 0.0;
  b_CD[6] = t4 * t13 * 9.81;
  c_alpha_tmp = t14_tmp * t13 * t20;
  b_CD[7] = c_alpha_tmp * -167.4967109894491;
  b_CD[8] = 0.0;
  b_CD[9] = t10 * t13 * -9.81;
  b_CD[10] = 0.0;
  b_alpha_tmp = states[3] * CL;
  d_alpha_tmp = b_alpha_tmp * t5;
  b_states[0] = d_alpha_tmp * t4_tmp * t13 * t15 * t19 * 0.0160906034646792;
  f_alpha_tmp_tmp = t5 * t4_tmp;
  g_alpha_tmp_tmp = CL * t5;
  b_states[1] = g_alpha_tmp_tmp * t4_tmp * t13 * t15 * t20 * 334.9934219788982 -
                f_alpha_tmp_tmp * b_t14_tmp * t13 * t15 * t24 * 9.81;
  t17 = t4_tmp * t11;
  b_states[2] = t17 * t15 * t26 * 9.81;
  b_states[3] = t29 + t4_tmp * t4_tmp * t16 * t29;
  b_states[4] = f_alpha_tmp_tmp * t11 * t14 * t15 * t24 * -9.81;
  b_states[5] = 1.0;
  b_states[6] = f_alpha_tmp_tmp * b_t7 * t11 * t13 * t15 * 9.81;
  b_states[7] = 0.0;
  alpha_tmp_tmp = states[3] * t5;
  b_states[8] = alpha_tmp_tmp * t4_tmp * t13 * t15 * t20 * 167.4967109894491;
  b_states[9] = f_alpha_tmp_tmp * t9 * t11 * t13 * t15 * 9.81;
  b_states[10] = 0.0;
  c_states[0] = b_alpha_tmp * b_t2 * t13 * t19 * 0.0160906034646792;
  c_states[1] =
      b_t14_tmp * t28 * 9.81 + CL * b_t2 * t13 * t20 * 334.9934219788982;
  c_states[2] = -t29;
  c_states[3] = t17 * 9.81;
  c_states[4] = b_t2 * t11 * t14 * t24 * -9.81;
  c_states[5] = 0.0;
  c_states[6] = b_t2 * b_t7 * t11 * t13 * 9.81;
  c_states[7] = 0.0;
  c_states[8] = states[3] * b_t2 * t13 * t20 * 167.4967109894491;
  c_states[9] = b_t2 * t9 * t11 * t13 * 9.81;
  c_states[10] = 0.0;
  d_states[0] = d_alpha_tmp * t13 * t15 * t19 * 0.0160906034646792;
  d_states[1] = g_alpha_tmp_tmp * t13 * t15 * t20 * 334.9934219788982 -
                t5 * b_t14_tmp * t13 * t15 * t24 * 9.81;
  d_states[2] = t11 * t15 * t26 * 9.81;
  d_states[3] = t4_tmp * t16 * t29;
  d_states[4] = alpha_tmp * t14 * t15 * t24 * -9.81;
  d_states[5] = 0.0;
  d_states[6] = t5 * b_t7 * t11 * t13 * t15 * 9.81;
  d_states[7] = 0.0;
  d_states[8] = alpha_tmp_tmp * t13 * t15 * t20 * 167.4967109894491;
  d_states[9] = t5 * t9 * t11 * t13 * t15 * 9.81;
  d_states[10] = 0.0;
  dv[0] = 0.0;
  dv[1] = 0.0;
  dv[2] = 0.0;
  dv[3] = 0.0;
  dv[4] = 0.0;
  dv[5] = 0.0;
  dv[6] = -0.0002138;
  dv[7] = 0.0;
  dv[8] = 0.0;
  dv[9] = 0.0;
  dv[10] = -d_alpha_tmp_tmp;
  for (i = 0; i < 14; i++) {
    int b_tmp_j_input_sys_674cfd48df4a3213d3be218b57f43a70_jac_tmp;
    int b_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp;
    int c_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp;
    int d_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp;
    int e_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp;
    int f_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp;
    int i6;
    int i7;
    int i8;
    int tmp_j_input_sys_674cfd48df4a3213d3be218b57f43a70_jac_tmp;
    int tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp;
    i1 = i << 2;
    alpha_tmp_tmp =
        ((states_idx_0 *
              static_cast<double>(
                  tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1]) +
          g_alpha_tmp_tmp_tmp *
              static_cast<double>(
                  tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 +
                                                                       1])) +
         h_alpha_tmp_tmp_tmp *
             static_cast<double>(
                 tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 +
                                                                      2])) +
        f_alpha_tmp_tmp_tmp *
            static_cast<double>(
                tmp_j_input_sys_abd1dd15ef234fda3363cddb8e59878b_jac[i1 + 3]);
    j_CD[i] = alpha_tmp_tmp;
    i1 = 11 * i + 2;
    i2 = j_states[i1];
    j_states_tmp = 11 * i + 3;
    i3 = j_states[j_states_tmp];
    tmp_j_input_sys_674cfd48df4a3213d3be218b57f43a70_jac_tmp = 3 * i + 1;
    i6 = 11 * i + 9;
    i4 = j_states[i6];
    b_tmp_j_input_sys_674cfd48df4a3213d3be218b57f43a70_jac_tmp = 3 * i + 2;
    alpha_tmp = (e_alpha_tmp_tmp * static_cast<double>(i2) +
                 c_alpha_tmp_tmp * static_cast<double>(i3)) +
                f_alpha_tmp * static_cast<double>(i4);
    j_T[i] = alpha_tmp;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac[11 * i] = i2;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp = 11 * i + 1;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac
        [tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] = i3;
    b_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp = 11 * i + 4;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac[i1] =
        j_states[b_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp];
    c_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp = 11 * i + 5;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac[j_states_tmp] =
        j_states[c_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp];
    d_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp = 11 * i + 7;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac
        [b_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] = j_states
            [d_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp];
    i7 = 11 * i + 8;
    i2 = j_states[i7];
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac
        [c_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] = i2;
    e_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp = 11 * i + 6;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac
        [e_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] =
            alpha_tmp;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac
        [d_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] =
            alpha_tmp_tmp;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac[i7] = j_CL[i];
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac[i6] = j_alpha[i];
    f_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp = 11 * i + 10;
    tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac
        [f_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] = 0.0;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i] = i2;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 1] = i4;
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 2] =
        j_states[f_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp];
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 3] =
        j_controls[3 * i];
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 4] =
        j_controls[tmp_j_input_sys_674cfd48df4a3213d3be218b57f43a70_jac_tmp];
    tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[6 * i + 5] =
        j_controls[b_tmp_j_input_sys_674cfd48df4a3213d3be218b57f43a70_jac_tmp];
    alpha_tmp_tmp = 0.0;
    alpha_tmp = 0.0;
    t29 = 0.0;
    b_alpha_tmp_tmp = 0.0;
    t17 = 0.0;
    for (i8 = 0; i8 < 11; i8++) {
      d_alpha_tmp =
          tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac[i8 + 11 * i];
      alpha_tmp_tmp += b_CD[i8] * d_alpha_tmp;
      alpha_tmp += b_states[i8] * d_alpha_tmp;
      t29 += c_states[i8] * d_alpha_tmp;
      b_alpha_tmp_tmp += d_states[i8] * d_alpha_tmp;
      t17 += dv[i8] * d_alpha_tmp;
    }
    d_alpha_tmp = 0.0;
    f_alpha_tmp_tmp = 0.0;
    g_alpha_tmp_tmp = 0.0;
    for (i8 = 0; i8 < 6; i8++) {
      i2 = tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac[i8 + 6 * i];
      d_alpha_tmp += static_cast<double>(b_a[i8] * i2);
      f_alpha_tmp_tmp += static_cast<double>(c_a[i8] * i2);
      g_alpha_tmp_tmp += static_cast<double>(d_a[i8] * i2);
    }
    j_statesdot[11 * i] = j_rdot_E[3 * i];
    j_statesdot[tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] =
        j_rdot_E[tmp_j_input_sys_674cfd48df4a3213d3be218b57f43a70_jac_tmp];
    j_statesdot[i1] =
        j_rdot_E[b_tmp_j_input_sys_674cfd48df4a3213d3be218b57f43a70_jac_tmp];
    j_statesdot[j_states_tmp] = alpha_tmp_tmp;
    j_statesdot[b_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] =
        alpha_tmp;
    j_statesdot[c_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] =
        t29;
    j_statesdot[e_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] =
        b_alpha_tmp_tmp;
    j_statesdot[d_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] =
        t17;
    j_statesdot[i7] = d_alpha_tmp;
    j_statesdot[i6] = f_alpha_tmp_tmp;
    j_statesdot[f_tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac_tmp] =
        g_alpha_tmp_tmp;
  }
  //  Combine Variables to outputs
  outputs[0] = alpha;
  outputs[1] = CL;
  outputs[2] = CD;
  outputs[3] = d_alpha_tmp_tmp;
  outputs[4] = 0.0002138;
  outputs[5] = t13 * t24;
  outputs[6] = -states[7];
  b_CD[0] = e_alpha_tmp * t13 * t19 * 0.001640224614136514;
  b_CD[1] = b_alpha_tmp * t13 * t20 * 34.148157184393291;
  b_CD[2] = 0.0;
  b_CD[3] = 0.0;
  b_CD[4] = -t14 * t24;
  b_CD[5] = 0.0;
  b_CD[6] = b_t7 * t13;
  b_CD[7] = 0.0;
  b_CD[8] = c_alpha_tmp * 17.074078592196649;
  b_CD[9] = t9 * t13;
  b_CD[10] = 0.0;
  for (i = 0; i < 14; i++) {
    alpha_tmp_tmp = 0.0;
    alpha_tmp = 0.0;
    for (i1 = 0; i1 < 11; i1++) {
      t29 = tmp_j_input_sys_95bf0ef0a541e5e15b1e97c1ab8d4011_jac[i1 + 11 * i];
      alpha_tmp_tmp += b_CD[i1] * t29;
      alpha_tmp += static_cast<double>(a[i1]) * t29;
    }
    j_outputs[7 * i] = j_alpha[i];
    j_outputs[7 * i + 1] = j_CL[i];
    j_outputs[7 * i + 2] = j_CD[i];
    j_outputs[7 * i + 3] = j_T[i];
    j_outputs[7 * i + 4] = 0.0;
    j_outputs[7 * i + 5] = alpha_tmp_tmp;
    j_outputs[7 * i + 6] = alpha_tmp;
  }
}

void mb_OptimalManeuver_initialize()
{
}

void mb_OptimalManeuver_terminate()
{
  // (no terminate code required)
}

// End of code generation (mb_OptimalManeuver.cpp)
