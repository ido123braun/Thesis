function [ statesdot, outputs, j_statesdot, j_outputs ] = mb_OptimalManeuver(states, controls)
%mb_OptimalManeuver
% File automatically generated by FALCON.m

%=== Extract Data From Input ==============================================
x_E = states(1);
y_E = states(2);
z_E = states(3);
vx_E = states(4);
vy_E = states(5);
vz_E = states(6);
phi_P = states(7);
W_P = states(8);
phidot_P = states(9);
Js_P = states(10);
n_P = states(11);
phidotcom_P = controls(1);
Jscom_P = controls(2);
ncom_P = controls(3);

%=== Jacobians and Hessians ===============================================
j_states = zeros(11, 14);
j_states(:, 1 : 11) = eye(11);
j_x_E = j_states(1, :);
j_y_E = j_states(2, :);
j_z_E = j_states(3, :);
j_vx_E = j_states(4, :);
j_vy_E = j_states(5, :);
j_vz_E = j_states(6, :);
j_phi_P = j_states(7, :);
j_W_P = j_states(8, :);
j_phidot_P = j_states(9, :);
j_Js_P = j_states(10, :);
j_n_P = j_states(11, :);
j_controls = zeros(3, 14);
j_controls(:, 12 : 14) = eye(3);
j_phidotcom_P = j_controls(1, :);
j_Jscom_P = j_controls(2, :);
j_ncom_P = j_controls(3, :);

%=== Write Constants ======================================================

%=== Subsystem sysPositionPropagation =====================================

% Defined at main (main.m:46)

% Call sys_70f1ab52b326654d8650384e6c66097e_jac
[ rdot_PE, j_rdot_PE ] = sys_70f1ab52b326654d8650384e6c66097e_jac(vx_E, vy_E, vz_E);

% Hessian Jacobian for sys_70f1ab52b326654d8650384e6c66097e_jac
tmp_j_input_sys_70f1ab52b326654d8650384e6c66097e_jac = [j_vx_E; j_vy_E; j_vz_E];

% Calculation of Jacobian with respect to function global input for sys_70f1ab52b326654d8650384e6c66097e_jac
j_rdot_PE = j_rdot_PE * tmp_j_input_sys_70f1ab52b326654d8650384e6c66097e_jac;

%=== Subsystem sysThrustCalc ==============================================

% Defined at main (main.m:56)

% Call sys_b653047fe439321d85b8e4c67c1d239e_jac
[ T, TSFC, j_T, j_TSFC ] = sys_b653047fe439321d85b8e4c67c1d239e_jac(z_E, vx_E, vy_E, vz_E, Js_P);

% Hessian Jacobian for sys_b653047fe439321d85b8e4c67c1d239e_jac
tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac = [j_z_E; j_vx_E; j_vy_E; j_vz_E; j_Js_P];

% Calculation of Jacobian with respect to function global input for sys_b653047fe439321d85b8e4c67c1d239e_jac
j_T = j_T * tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac;
j_TSFC = j_TSFC * tmp_j_input_sys_b653047fe439321d85b8e4c67c1d239e_jac;

%=== Subsystem sysAeroCalc ================================================

% Defined at main (main.m:51)

% Call sys_ae427af578a359dbc76e23f19598e1e5_jac
[ alpha, CL, CD, rho_P, j_alpha, j_CL, j_CD, j_rho_P ] = sys_ae427af578a359dbc76e23f19598e1e5_jac(z_E, vx_E, vy_E, vz_E, n_P, T, W_P);

% Hessian Jacobian for sys_ae427af578a359dbc76e23f19598e1e5_jac
tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac = [j_z_E; j_vx_E; j_vy_E; j_vz_E; j_n_P; j_T; j_W_P];

% Calculation of Jacobian with respect to function global input for sys_ae427af578a359dbc76e23f19598e1e5_jac
j_alpha = j_alpha * tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac;
j_CL = j_CL * tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac;
j_CD = j_CD * tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac;
j_rho_P = j_rho_P * tmp_j_input_sys_ae427af578a359dbc76e23f19598e1e5_jac;

%=== Subsystem sysTranslationPropagation ==================================

% Defined at main (main.m:61)

% Call sys_3f22f56eae30e66f37b93157a10b4364_jac
[ vdot_PE, Wdot_P, gamma_P, psi_P, j_vdot_PE, j_Wdot_P, j_gamma_P, j_psi_P ] = sys_3f22f56eae30e66f37b93157a10b4364_jac(z_E, vx_E, vy_E, vz_E, phi_P, phidot_P, T, CD, CL, W_P, alpha, TSFC);

% Hessian Jacobian for sys_3f22f56eae30e66f37b93157a10b4364_jac
tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac = [j_z_E; j_vx_E; j_vy_E; j_vz_E; j_phi_P; j_phidot_P; j_T; j_CD; j_CL; j_W_P; j_alpha; j_TSFC];

% Calculation of Jacobian with respect to function global input for sys_3f22f56eae30e66f37b93157a10b4364_jac
j_vdot_PE = j_vdot_PE * tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac;
j_Wdot_P = j_Wdot_P * tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac;
j_gamma_P = j_gamma_P * tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac;
j_psi_P = j_psi_P * tmp_j_input_sys_3f22f56eae30e66f37b93157a10b4364_jac;

%=== Subsystem sysCommandsDelay ===========================================

% Defined at main (main.m:66)

% Call sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
[ phidot2_P, Jsdot_P, ndot_P, j_phidot2_P, j_Jsdot_P, j_ndot_P ] = sys_2e11da000b4bbadf99d6dd9a0951f18b_jac(phidot_P, Js_P, n_P, phidotcom_P, Jscom_P, ncom_P);

% Hessian Jacobian for sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac = [j_phidot_P; j_Js_P; j_n_P; j_phidotcom_P; j_Jscom_P; j_ncom_P];

% Calculation of Jacobian with respect to function global input for sys_2e11da000b4bbadf99d6dd9a0951f18b_jac
j_phidot2_P = j_phidot2_P * tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac;
j_Jsdot_P = j_Jsdot_P * tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac;
j_ndot_P = j_ndot_P * tmp_j_input_sys_2e11da000b4bbadf99d6dd9a0951f18b_jac;

%=== Split Variable rdot_PE ===============================================
xdot_E = rdot_PE(1.');
j_xdot_E = [j_rdot_PE(1,:)];
ydot_E = rdot_PE(2.');
j_ydot_E = [j_rdot_PE(2,:)];
zdot_E = rdot_PE(3.');
j_zdot_E = [j_rdot_PE(3,:)];

%=== Split Variable vdot_PE ===============================================
vxdot_E = vdot_PE(1.');
j_vxdot_E = [j_vdot_PE(1,:)];
vydot_E = vdot_PE(2.');
j_vydot_E = [j_vdot_PE(2,:)];
vzdot_E = vdot_PE(3.');
j_vzdot_E = [j_vdot_PE(3,:)];

% Combine Variables to statesdot
statesdot = [xdot_E; ydot_E; zdot_E; vxdot_E; vydot_E; vzdot_E; phidot_P; Wdot_P; phidot2_P; Jsdot_P; ndot_P];
j_statesdot = [
    j_xdot_E(1, :)
    j_ydot_E(1, :)
    j_zdot_E(1, :)
    j_vxdot_E(1, :)
    j_vydot_E(1, :)
    j_vzdot_E(1, :)
    j_phidot_P(1, :)
    j_Wdot_P(1, :)
    j_phidot2_P(1, :)
    j_Jsdot_P(1, :)
    j_ndot_P(1, :)
];

% Combine Variables to outputs
outputs = [gamma_P; psi_P; alpha; CL; CD; T; TSFC; rho_P];
j_outputs = [
    j_gamma_P(1, :)
    j_psi_P(1, :)
    j_alpha(1, :)
    j_CL(1, :)
    j_CD(1, :)
    j_T(1, :)
    j_TSFC(1, :)
    j_rho_P(1, :)
];

end
